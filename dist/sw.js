function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}var serviceWorkerOption={"assets":["/apiGateway.js","/index.html"]};!function(e){var t={};function n(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e){n.d(o,s,function(t){return e[t]}.bind(null,s))}return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){(function(e){importScripts("https://cdn.jsdelivr.net/npm/localforage@1.7.3/dist/localforage.min.js","https://cdnjs.cloudflare.com/ajax/libs/Base64/1.0.2/base64.min.js");var t=!0,n=self.localforage,o=e.serviceWorkerOption.assets,s="static";var r=[].concat(o,["./"]);function c(e){var t={};for(var _iterator=e.entries(),_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++]}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value}var _n=_ref;t[_n[0]]=_n[1]}return t}function i(e){return btoa?btoa(e.headers.get("servicename")):e.headers.get("servicename")}function a(e){try{var _t=JSON.parse(e.headers.get("custom_headers"));return!(!_t.hasOwnProperty("useCache")||"boolean"!=typeof _t.useCache)&&(console.log("inside cusotm headers"),_t.useCache)}catch(e){return!1}}r=(r=r.map(function(t){return new URL(t,e.location).toString()})).filter(function(e){return r.includes("sockjs-node")}),self.addEventListener("install",function(n){t&&(console.log("[SW] Install event"),console.log("Claiming control")),n.waitUntil(e.caches.open(s).then(function(e){return e.addAll(r)}).then(function(){t&&console.log("Cached assets: main",r)}).catch(function(e){throw console.error(e),e}))}),self.addEventListener("activate",function(n){if(t)return console.log("[SW] Activate event"),self.clients.claim();n.waitUntil(e.caches.keys().then(function(t){return Promise.all(t.map(function(t){return 0===t.indexOf(s)?null:e.caches.delete(t)}))}))}),self.addEventListener("message",function(e){if(navigator.onLine){!function(e){try{var _t2=btoa(e.serviceName.toString().split("").reverse().join(""));n.setItem(_t2,btoa(JSON.stringify(e)))}catch(e){console.log(e)}}(e.data)}switch(e.data.action){case"skipWaiting":self.skipWaiting&&(self.skipWaiting(),self.clients.claim());}}),self.addEventListener("fetch",/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5(o){return regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!("GET"===o.request.method)){_context5.next=2;break}return _context5.abrupt("return",(t&&(console.log("[SW] Ignore non GET request "+o.request.method),console.log(r)),function(n){var o=n.request,r=new URL(o.url);if(r.origin!==location.origin||r.href.includes("sockjs-node"))return void(t&&console.log("[SW] Ignore difference origin "+r.origin));var c=e.caches.match(o).then(function(c){return c?(t&&console.log("[SW] fetch URL "+r.href+" from cache"),c):fetch(o).then(function(n){if(!n||!n.ok)return t&&console.log("[SW] URL ["+r.toString()+"] wrong responseNetwork: "+n.status+" "+n.type),n;t&&console.log("[SW] URL "+r.href+" fetched");var c=n.clone();return e.caches.open(s).then(function(e){return e.put(o,c)}).then(function(){t&&console.log("[SW] Cache asset: "+r.href)}),n}).catch(function(){return"navigate"===n.request.mode?e.caches.match("./"):null})});return n.respondWith(c)}(o)));case 2:"POST"===o.request.method&&(console.log(a(o.request)),!1===navigator.onLine&&"AUTH_VAHANA"!==o.request.headers.get("servicename")&&"AUTH"!==o.request.headers.get("servicename")&&a(o.request)?(console.log("inside naviagtor"),o.respondWith(fetch(o.request).catch(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(e){var t,_e,_t4;return regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(o.request);_context2.t0="AUTH_VAHANA"!==o.request.headers.get("servicename")&&"AUTH"!==o.request.headers.get("servicename")&&a(o.request);if(!_context2.t0){_context2.next=5;break}_context2.next=5;return function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(e){var _t3,_o;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_t3=e.headers.get("servicename"),_o=btoa(_t3.toString().split("").reverse().join(""));_context.t0=function(e){try{self.clients.matchAll().then(function(t){return t.map(function(t){return t.postMessage(e)})})}catch(e){console.log(e)}};_context.next=5;return n.getItem(_o);case 5:_context.t1=_context.sent;!(0,_context.t0)(_context.t1);_context.next=12;break;case 9:_context.prev=9;_context.t2=_context["catch"](0);console.log(_context.t2);case 12:case"end":return _context.stop();}}},_callee,null,[[0,9]])}));return function(_x3){return _ref4.apply(this,arguments)}}()(o.request);case 5:_context2.next=7;return n.getItem(i(o.request));case 7:t=_context2.sent;if(!(console.log("user is offline"),null!==t)){_context2.next=10;break}return _context2.abrupt("return",function(e){return Promise.resolve(new Response(e.body,e))}(t));case 10:_e={status:"Service Worker SWOO1",errorHint:"API has not been cached",errorResponse:"No records found in offlineDB",message:"No records found for this API"},_t4=new Blob([JSON.stringify(_e,null,2)],{type:"application/json"});return _context2.abrupt("return",new Response(_t4,{status:400,statusText:"No records found in offlineDB"}));case 12:case"end":return _context2.stop();}}},_callee2)}));return function(_x2){return _ref3.apply(this,arguments)}}()))):o.respondWith(fetch(o.request.clone()).then(/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4(e){return regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt("return",(a(o.request)&&function(){var _ref6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(e,t){var _o2;return regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!("AUTH_VAHANA"!==e.headers.get("servicename")&&"AUTH"!==e.headers.get("servicename"))){_context3.next=5;break}_context3.next=3;return function(e){var t={headers:c(e.headers),status:e.status,statusText:e.statusText};return e.clone().text().then(function(e){return t.body=e,Promise.resolve(t)})}(t);case 3:_o2=_context3.sent;n.setItem(i(e),_o2);case 5:case"end":return _context3.stop();}}},_callee3)}));return function(_x5,_x6){return _ref6.apply(this,arguments)}}()(o.request,e),e));case 1:case"end":return _context4.stop();}}},_callee4)}));return function(_x4){return _ref5.apply(this,arguments)}}()).catch(function(e){console.log(e)})));case 3:case"end":return _context5.stop();}}},_callee5)}));return function(_x){return _ref2.apply(this,arguments)}}())}).call(this,n(1))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=sw.js.map
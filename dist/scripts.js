!function(e,t){for(var r in t)e[r]=t[r]}(window,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=25)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(29);r(30);var o=r(31),i=function(){this.encryption=new Encryption,this.aesEncryption=new n.AESEncryption(this.encryption.cryptoJs),this.rsaEncryption=new o.RSAEncryption(this.encryption.jsEncrypt)};t.Security=i},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),s=r(10),a=r(3),u=r(2),c=r(7),l=function(){function e(){this.security=new i.Security,this.dateParsing=new s.DateParsing}return e.prototype.clearCreds=function(){u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.AUTHJWTTOKEN)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.LOGINID))},e.prototype.clearCredsAll=function(){u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.AUTHJWTTOKEN)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.LOGINID)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.REGISTERATIONFAIL)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.PUBLICKEY)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.JWTTOKEN)),u.Storage.getInstance().clear(this.makeKey("pmlc"))},e.prototype.makeKey=function(e){return a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()+"-"+a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()+"-"+e},e.prototype.setGuid=function(e){return n(this,void 0,void 0,function(){var t,r;return o(this,function(n){switch(n.label){case 0:return t=(new Date).getTime(),r="xxxxxxxx-xxxx-3xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var r=(t+16*Math.random())%16|0;return t=Math.floor(t/16),("x"===e?r:3&r|8).toString(16)}),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.GUID),this.security.aesEncryption.getEncryption(r,e))];case 1:return n.sent(),[2]}})})},e.prototype.handleGUID=function(){return n(this,void 0,void 0,function(){var e,t,r,n,i;return o(this,function(o){switch(o.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return e=o.sent(),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.JWTTOKEN))];case 2:return t=o.sent(),e&&t?(i=(n=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.GUID))]):[3,4];case 3:return(r=i.apply(n,[o.sent()]))&&""===this.security.aesEncryption.getDecryption(r,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())?(alert("Error"),this.clearCredsAll(),[2]):[3,5];case 4:this.setGuid(a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey()),o.label=5;case 5:return[2]}})})},e.prototype.isRegistered=function(){return n(this,void 0,void 0,function(){var e,t;return o(this,function(r){switch(r.label){case 0:return u.Storage.getInstance().clear(this.makeKey("regisFail")),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return e=r.sent(),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.JWTTOKEN))];case 2:return t=r.sent(),[2,null!==e&&null!==t]}})})},e.prototype.checkPropCall=function(){return n(this,void 0,void 0,function(){var e,t;return o(this,function(r){switch(r.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.makeKey("pmlc"))];case 1:return e=r.sent(),t=this.dateParsing.dateFormat("propMas",new Date),[2,e===t]}})})},e.prototype.userCredentials=function(e,t,r){return n(this,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.LOGINID),e)];case 1:return n.sent(),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.AUTHJWTTOKEN),this.security.aesEncryption.getEncryption(t,r))];case 2:return n.sent(),[2]}})})},e.prototype.setPmlcValue=function(){u.Storage.getInstance().setItem(this.makeKey("pmlc"),this.dateParsing.dateFormat("propMas",new Date))},e.prototype.fingerprint=function(){return n(this,void 0,void 0,function(){var e,t,r;return o(this,function(n){switch(n.label){case 0:return r=(t=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.GUID))];case 1:return e=r.apply(t,[n.sent()]),[2,this.security.aesEncryption.getDecryption(e,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())]}})})},e.prototype.getRequestid=function(e,t,r,n){return n.orgId+n.appId+t+e+this.dateParsing.dateFormat("requestid",r)},e.prototype.getClientid=function(e){return e.orgId+"~"+e.appId},e.prototype.generateTxnKey=function(e,t){return n(this,void 0,void 0,function(){var r,n,i,s,a,l;return o(this,function(o){switch(o.label){case 0:return r=this.randomString(32-this.dateParsing.dateFormat("txnDate",e).length),r=this.dateParsing.dateFormat("txnDate",e)+r,s=(i=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return n=s.apply(i,[o.sent()]),a=this.security.aesEncryption.getDecryption(n,t.secureKey),l=this.security.rsaEncryption.getRsaEncrypt(r,a),l=this.base64ToHex(l),[2,{t:r,b:l}]}})})},e.prototype.randomString=function(e){for(var t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",r="",n=e;n>0;--n)r+=t[Math.round(Math.random()*(t.length-1))];return r},e.prototype.base64ToHex=function(e){try{for(var t=void 0,r=0,n=atob(e.replace(/[ \r\n]+$/,"")),o=[];r<n.length;++r){var i=n.charCodeAt(r).toString(16);1===i.length&&(i="0"+i),o[o.length]=i,t=JSON.parse(JSON.stringify(o))}return t.join("")}catch(e){return}},e.prototype.authCredentials=function(e,t,r){return n(this,void 0,void 0,function(){var n,i;return o(this,function(o){switch(o.label){case 0:for(i in n={},e)"public-pem"===i&&(n.key=this.security.aesEncryption.encryptText(e[i].toString(),t));return[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.PUBLICKEY),n.key)];case 1:return o.sent(),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.JWTTOKEN),r)];case 2:return o.sent(),[2]}})})},e}();t.RequestUtility=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(28),o=r(4),i=r(14),s=r(0),a=function(){function e(){this.security=new s.Security}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setItem=function(e,t){var r=this;return new Promise(function(n){try{t=r.getEncryptedValue(t,r.encryptedKey||e);var s=r.storageApi.setItem(r.getKeyName(e),JSON.stringify(t));s instanceof Promise?s.then(function(e){n(!0)}):n(!0)}catch(e){throw o.Logger.getInstance().error("key does not exist in storage"),new i.CustomError("PW001",e)}})},e.prototype.setDriver=function(e){n.setDriver(this.getDriverByType(e))},e.prototype.clearAll=function(){"sessionStorage"===this.driverType?sessionStorage.clear():n.clear()},e.prototype.clear=function(e){"sessionStorage"===this.driverType?sessionStorage.removeItem(this.getKeyName(e)):n.removeItem(this.getKeyName(e))},e.prototype.getAllKeys=function(){var e,t=this;return new Promise(function(r,s){try{(e="sessionStorage"===t.driverType?Object.keys(sessionStorage):n.keys())instanceof Promise?e.then(function(e){r(t.getDecryptedKeyList(e))}):r(t.getDecryptedKeyList(e))}catch(e){throw o.Logger.getInstance().error("key does not exist in storage"),new i.CustomError("PW001",e)}})},e.prototype.getItemValue=function(e){var t=this;return new Promise(function(r,n){try{var s=t.getItem(e);s instanceof Promise?s.then(function(n){r(t.getDecryptedValue(n,t.encryptedKey||e))}):r(t.getDecryptedValue(s,t.encryptedKey||e))}catch(e){throw o.Logger.getInstance().error("key does not exist in storage"),new i.CustomError("PW001",e)}})},e.prototype.getDriverByType=function(e){var t=null;switch(e){case"localStorage":t=n.LOCALSTORAGE;break;case"indexDB":t=n.INDEXEDDB;break;case"webSql":t=n.WEBSQL;default:t=n.LOCALSTORAGE}return t},e.prototype.setConfiguration=function(e,t,r,o){"sessionStorage"!==e?(n.config({description:"Setting the Configuration Detail of localForage",driver:this.getDriverByType(e),name:"",size:o||4980736,storeName:"keyvaluepairs",version:1}),this.setStorageApi()):this.setSessionStorage(),this.driverType=e,this.isEncryption=t,this.encryptedKey=r},e.prototype.setSessionStorage=function(){this.storageApi=sessionStorage},e.prototype.setStorageApi=function(){this.storageApi=n},e.prototype.getItem=function(e){return this.storageApi.getItem(this.getKeyName(e))},e.prototype.getEncryptedValue=function(e,t){return this.isEncryption?this.security.aesEncryption.getEncryption(JSON.stringify(e),t):e},e.prototype.getDecryptedValue=function(e,t){return e&&this.isEncryption?this.security.aesEncryption.getDecryption(JSON.parse(e),t):e},e.prototype.getKeyName=function(e){return this.isEncryption?btoa(e):e},e.prototype.getDecryptedKeyList=function(e){return this.isEncryption?e.map(function(e){return atob(e)}):e},e}();t.Storage=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(33),o=function(){function e(){}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setEnvironment=function(e){e.hasOwnProperty("environment")&&(e=e.environment),this.environment=new n.Environment(e)},e.prototype.getEnvironment=function(){return this.environment},e}();t.EnvironmentStore=o},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(27),s=function(e){function t(){return e.call(this)||this}return o(t,e),t.getInstance=function(){return t.instance||(t.instance=new i.CustomConsole),t.instance},t}(i.CustomConsole);t.Logger=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.NETWORK="NETWORK",e.BODYPARAM="bodyParam",e.CALLBACKINVALID="CALLBACKINVALID",e.HEADERPARAM="headerParam",e.GUID="guid",e.REQUESTINVALID="requestInvalid",e.SERVICEINVALID="serviceInvalid",e.DECRYPTION="decryption",e.PARSINGRESPONSE="parsingResponse",e.SERVERCONNECTING="serverConnecting",e.REGISTRATIONFAILED="registrationFailed",e.DUPLICATESESSION="loggedIn",e.UNKNOWN="unknown",e}();t.ErrorConstant=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.mapAPIResponse=function(t,r,n){return t?e.getSuccessResponse(t,r):e.getErrorResponse(t,r,n)},e.getSuccessResponse=function(e,t){return{status:e,data:t}},e.getErrorResponse=function(e,t,r){return{status:e,servercode:t.status,errorCode:r,erroMessage:t.message,completeError:t}},e}();t.UserResponse=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.JWTTOKEN="jwtToken",e.LOGINID="loginId",e.PUBLICKEY="Publickey",e.AUTHJWTTOKEN="authJwtToken",e.GUID="GUID",e.REGISTERATIONFAIL="regisFail",e}();t.StorageConstant=n},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(5),s=r(42),a=r(14),u=function(e){function t(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.apply(this,t)||this}return o(t,e),t.getErrors=function(e){var t={},r={};switch(e){case i.ErrorConstant.NETWORK:t.status=!1,t.message=s.ErrorMessage.NETWORKOFFLINE,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.BODYPARAM:t.status=!1,t.message=s.ErrorMessage.BODYNOTVALID,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.HEADERPARAM:t.status=!1,t.message=s.ErrorMessage.HEADERNOTVALID,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.GUID:t.status=!1,t.message=s.ErrorMessage.GUUIDERROR,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.REQUESTINVALID:t.status=!1,t.message=s.ErrorMessage.REQUESTNOTVALID,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.SERVICEINVALID:t.status=!1,t.message=s.ErrorMessage.MAXSERVICE,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.DECRYPTION:t.status=!1,t.message=s.ErrorMessage.DECRYPTION,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.PARSINGRESPONSE:t.status=!1,t.message=s.ErrorMessage.PARSINGRESPONSE,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.SERVERCONNECTING:t.status=!1,t.message=s.ErrorMessage.SERVERCONNECTION,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.REGISTRATIONFAILED:t.status=!1,t.message=s.ErrorMessage.REGISTRATION,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.DUPLICATESESSION:t.status=!1,t.message=s.ErrorMessage.DUPLICATESESSION,r=new a.CustomError("PW-0001",t);break;case i.ErrorConstant.CALLBACKINVALID:t.status=!1,t.message=s.ErrorMessage.CALLBACKINVALID,r=new a.CustomError("PW-0001",t);break;default:t.status=!1,t.message=s.ErrorMessage.DEFAULTMESSAGE,r=new a.CustomError("PW-0001",t)}return r},t}(Error);t.ErrorHandler=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){this.pwRequest={PWHeader:{clientid:"",deviceid:"",platform:"WEB",authorization:"",requesttype:"",txnkey:"",requestid:"",servicename:"",hash:"",nounce:""},PWBody:{interfaces:{APPLICATION_VERSION:"",DEVICE_TIMESTAMP:"",PW_CLIENT_VERSION:"",fingerprint:"",DEVICE_MAKE:"",DEVICE_MODEL:"",PW_VERSION:"",DEVICE_LATITUDE:"",DEVICE_LONGITUDE:""},services:{}}}};t.PlatwareRequestModel=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.dateFormat=function(e,t){"object"==typeof t||(t=new Date);var r="",n="",o="",i="",s="",a="",u="";return"txnDate"===e?(r=t.getUTCDate()+"",n=t.getUTCMonth()+1+"",o=t.getUTCFullYear()+"",i=t.getUTCHours()+"",s=t.getUTCMinutes()+"",a=t.getUTCSeconds()+"",u=t.getUTCMilliseconds()+""):(r=t.getDate()+"",n=t.getMonth()+1+"",o=t.getFullYear()+"",i=t.getHours()+"",s=t.getMinutes()+"",a=t.getSeconds()+"",u=t.getMilliseconds()+""),r=this.checkZero(r),n=this.checkZero(n),o=this.checkZero(o),i=this.checkZero(i),s=this.checkZero(s),a=this.checkZero(a),"device"===e?r+"-"+n+"-"+o+" "+i+":"+s+":"+a:"requestid"===e?r+n+o+i+s+a+u:"txnDate"===e?o.toString().substr(-2)+n+r+i+s+a+this.addZero(u.toString()):"propMas"===e?r+"-"+n+"-"+o:r+n+o+i+s+a+u},e.prototype.addZero=function(e){return 2==e.length?e="0"+e:1==e.length&&(e="00"+e),e},e.prototype.checkZero=function(e){return 1==e.length&&(e="0"+e),e},e}();t.DateParsing=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(22),o=r(38),i=r(23),s=function(){function e(e,t){this.setDefaultProps=new i.SetPWRequest,this.setDefaultProps.setPWRequest(),this.hexString=new o.HexUtility,this.apiType=new n.ApiType,this.fingerPrint=t,this.windowNavigator=window.navigator,e.reqData.services&&(this.serviceName=Object.keys(e.reqData.services).join("~").toString()),this.currentDate=new Date,this.currentNounce=this.currentDate.getTime(),this.nounce=this.hexString.getHexString(this.currentDate.getTime().toString()),this.envProp=e.envProps.envProps}return Object.defineProperty(e.prototype,"getFingerPrint",{get:function(){return this.fingerPrint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getWindowNavigator",{get:function(){return this.windowNavigator},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getServiceName",{get:function(){return this.serviceName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getCurrentDate",{get:function(){return this.currentDate},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getCurrentNounce",{get:function(){return this.currentNounce},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getNounce",{get:function(){return this.nounce},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getEnvProp",{get:function(){return this.envProp},enumerable:!0,configurable:!0}),e}();t.RequestProprty=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(45),s=r(46),a=r(47),u=r(48),c=r(3),l=r(1),p=r(19),h=r(20),f=r(16),d=r(24),g=r(4),y=r(53),v=function(){function e(){this.requestController=new h.RequestController,this.networkController=new p.NetworkController,this.requestUtility=new l.RequestUtility,this.handler=new i.Handlers,this.validator=new d.Validators}return e.prototype.runLifeCycle=function(){},e.prototype.doRegister=function(e){return n(this,void 0,void 0,function(){var t,r,n,i;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,13,,14]),g.Logger.getInstance().log("=================Inside doRegister Method ========="),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/register",[4,this.requestUtility.isRegistered()];case 1:return o.sent()?[3,11]:(g.Logger.getInstance().log("==Registration is not Done===, Initiate the Registration Process"),[4,this.requestController.getRegistrationRequest(e)]);case 2:return r=o.sent(),g.Logger.getInstance().log("==Registration request preparation Done",r),[4,this.callNetworkController({url:t,body:r.PWBody,header:r.PWHeader})];case 3:return n=o.sent(),console.log(n),n.status?[4,(new u.RegistrationResponseHandler).readResponse(n.body,n.headers)]:[3,6];case 4:return o.sent(),[4,this.requestUtility.isRegistered()];case 5:return[2,o.sent()];case 6:return o.trys.push([6,9,,10]),[4,this.handler.httpRespnseponseHandled(n.body,r.PWHeader)];case 7:return i=o.sent(),[4,(new u.RegistrationResponseHandler).registrationErrorHandle(i,n.body,e)];case 8:return o.sent(),[3,10];case 9:throw o.sent();case 10:return[3,12];case 11:return[2,Promise.resolve(!0)];case 12:return[3,14];case 13:throw o.sent();case 14:return[2]}})})},e.prototype.doAuth=function(e){return n(this,void 0,void 0,function(){var t,r,n,i;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,9,,10]),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/register",g.Logger.getInstance().log("If registration is not done yet ==> Prepare request For registeration and do it"),[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getAuthRequest(e)]:[3,8];case 2:return r=o.sent(),[4,this.callNetworkController({url:t,body:r.temp,header:r.PWHeader})];case 3:return(n=o.sent()).status?(g.Logger.getInstance().log("If response is True ==> Save The Credentials"),[4,(new s.AuthResponseHandler).readResponse(n.body,n.headers,r.loginId,n,r.txnkey)]):[3,5];case 4:return[2,o.sent()];case 5:return o.trys.push([5,7,,8]),g.Logger.getInstance().log("If response is False ==> Handle the error"),i=this.handler.httpRespnseponseHandled(n.body,r.PWHeader),[4,(new s.AuthResponseHandler).authErrorHandle(i,n.body,e)];case 6:throw o.sent();case 7:throw o.sent();case 8:return[3,10];case 9:throw o.sent();case 10:return[2]}})})},e.prototype.doGateway=function(e,t){return n(this,void 0,void 0,function(){var t,r,n,i;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,10,,11]),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+e.url,g.Logger.getInstance().log("====Checking if Registartion is Done or not==="),[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getGatewayRequest(e)]:[3,9];case 2:return r=o.sent(),this.emitValueToServiceWorker(r.PWHeader.servicename,r.txnkey),[4,this.callNetworkController({url:t,body:r.temp,header:r.PWHeader})];case 3:return(n=o.sent()).status?(g.Logger.getInstance().log("If response is True ==> Save The Credentials"),r.txnkey=!1===navigator.onLine?this.transactionKey:r.txnkey,[4,(new a.GatewayResponseHandler).readResponse(n.body,n.headers,r.loginId,n,r.txnkey)]):[3,5];case 4:return[2,o.sent()];case 5:return o.trys.push([5,8,,9]),g.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(n.body,r.PWHeader)];case 6:return i=o.sent(),[4,(new a.GatewayResponseHandler).gatewayErrorHandle(i,n.body,e)];case 7:throw o.sent();case 8:throw o.sent();case 9:return[3,11];case 10:throw o.sent();case 11:return[2]}})})},e.prototype.callNetworkController=function(e){return g.Logger.getInstance().log("==calling Network Layer with request",e),this.networkController.doCall(e)},e.prototype.doCall=function(e,t){return n(this,void 0,void 0,function(){return o(this,function(r){switch(r.label){case 0:return r.trys.push([0,6,,7]),g.Logger.getInstance().log("Adding event  listener for Service Worker"),f.ServiceWorkerWrappper.isRegistered&&this.recievedTransactionKeySW(),g.Logger.getInstance().log("Check Type Of Call ==> Authentication or Gateway"),"AUTH_VAHANA"!==Object.keys(e.reqData.services)[0]&&"AUTH"!==Object.keys(e.reqData.services)[0]?[3,3]:(g.Logger.getInstance().log("checking System is online or not"),this.validator.networkValidators.isNetworkAvailable()?(g.Logger.getInstance().log("========== Calling Auth Service ============="),[4,this.doAuth(e)]):[3,2]);case 1:return[2,r.sent()];case 2:return[3,5];case 3:return g.Logger.getInstance().log("=====================Calling Gateway ======================"),[4,this.doGateway(e,t)];case 4:return[2,r.sent()];case 5:return[3,7];case 6:throw r.sent();case 7:return[2]}})})},e.prototype.doEndPointCall=function(e){return n(this,void 0,void 0,function(){var t,r,n,i;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,10,,11]),"/dynamic-router",t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/dynamic-router"+e.url,[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getEndPointRequest(e)]:[3,9];case 2:return r=o.sent(),this.emitValueToServiceWorker(t,r.txnkey),[4,this.callNetworkController({url:t,body:r.temp,header:r.PWHeader})];case 3:return n=o.sent(),console.log(n),n.status?(e.txnkey=!1===navigator.onLine?this.transactionKey:e.txnkey,[4,(new y.EndPointResponseHandler).readResponse(n.body,n.headers,r.txnkey)]):[3,5];case 4:return[2,o.sent()];case 5:return o.trys.push([5,8,,9]),g.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(n.body,e.PWHeader)];case 6:return i=o.sent(),[4,(new y.EndPointResponseHandler).gatewayErrorHandle(i,n.body,"")];case 7:throw o.sent();case 8:throw o.sent();case 9:return[3,11];case 10:throw o.sent();case 11:return[2]}})})},e.prototype.emitValueToServiceWorker=function(e,t){g.Logger.getInstance().log("check if service worker is registered or not",f.ServiceWorkerWrappper.isRegistered),g.Logger.getInstance().log("Sending the transaction key to servic worker",e,t),f.ServiceWorkerWrappper.isRegistered},e.prototype.recievedTransactionKeySW=function(){var e=this;try{navigator.serviceWorker&&(navigator.serviceWorker.onmessage=function(t){var r=JSON.parse(atob(t.data));e.transactionKey=atob(r.transactionKeyBase64)})}catch(e){throw e}},e}();t.ServiceController=v},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(4),o=r(2),i=r(16),s=r(17),a=function(){function e(){}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setConfiguration=function(e){this.configuration=e,this.doAppConfiguration()},e.prototype.getConfiguration=function(){return this.configuration},e.prototype.doAppConfiguration=function(){var e=this.getConfiguration();n.Logger.getInstance().setLogger(e.logging),o.Storage.getInstance().setConfiguration(e.storage,e.enableStorageEncryption||!1,e.storageEncryptionKey),s.DocumentManager.basePoint=e.DMSPoint?e.DMSPoint:s.DocumentManager.basePoint,e.serviceWorker&&(i.ServiceWorkerWrappper.isActiveOnLocalhost=e.activeSWOnLocalHost||!1,i.ServiceWorkerWrappper.getInstance().registerServiceWorker())},e}();t.AppConfigStore=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){this.code=e,this.response=t};t.CustomError=n},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(13),o=r(32),i=r(4),s=function(){function e(){this.handlers=[],this.isLocalhost=Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/))}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.registerServiceWorker=function(){var t=this;try{if("serviceWorker"in navigator&&(!this.isLocalhost||e.isActiveOnLocalhost)){o.register();navigator.serviceWorker.getRegistrations().then(function(t){console.log(t),e.isRegistered=!0}),navigator.serviceWorker.onmessage=function(e){t.onNext(e)}}}catch(e){i.Logger.getInstance().error("Unable to register the service worker because it is not running on https url",e)}},e.prototype.sendMessageToServiceWorker=function(e){try{return new Promise(function(t,r){var n=new MessageChannel;n.port1.onmessage=function(e){console.log("==>",e),e.data.error?r(e.data.error):t(e.data)},navigator.serviceWorker.controller.postMessage(e,[n.port2])})}catch(e){i.Logger.getInstance().error("Unable to send the message to service worker",e)}},e.prototype.isServiceWorkerEnabled=function(){return n.AppConfigStore.getInstance().getConfiguration().serviceWorker},e.prototype.subscribe=function(e){this.handlers.push(e)},e.prototype.onNext=function(e){var t=this;this.handlers.forEach(function(r){r.call(t,e)})},e.prototype.unRegister=function(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},e.prototype.checkValidServiceWorker=function(e){fetch(e).then(function(e){404!==e.status&&-1!==e.headers.get("content-type").indexOf("javascript")||navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})})}).catch(function(){console.log("No internet connection found. App is running in offline mode.")})},e}();t.ServiceWorkerWrappper=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),s=r(4),a=r(3),u=r(18),c=r(54),l=function(){function e(){this.constantUrl=c.controllerConst}return e.getInstance=function(){return!e.basePoint||e.basePoint,this.instance},e.prototype.updateDocumentMetadata=function(e,t,r){return this.updateMetaData(e,t,r,this.constantUrl.DMS.uploadMetaData,this.constantUrl.DMS.DOCUMENT)},e.prototype.updateFileMetadata=function(e,t,r){return this.updateMetaData(e,t,r,this.constantUrl.DMS.uploadMetaData,this.constantUrl.DMS.FILE)},e.prototype.getViewerDataById=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.fetchByFileId;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========VIEWER DATA BY ID Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof p&&r instanceof Object&&c instanceof Object&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n={},p=p+"/"+r.storageId+"/"+r.fileId,s.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),h(f),[3,5];case 5:return[2]}})})})},e.prototype.updateFileMetaData=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.updateFileMetaData;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f,d;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========LISTING DATA Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.storageId&&r.files instanceof Array&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n=[],l={},r.files.forEach(function(e){l.id=e.id,l.metadata=e.customMetadata,n.push(l)}),p=p+"/"+r.storageId,s.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return f=o.sent(),e(f),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return d=o.sent(),h(d),[3,5];case 5:return[2]}})})})},e.prototype.downloadFileUrl=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.downloadUrl;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========DOWNLOAD URL Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.fileId instanceof Array&&r.storageId&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n={fileIds:r.fileId},p=p+"/"+r.storageId,s.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),h(f),[3,5];case 5:return[2]}})})})},e.prototype.deleteByFileId=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.deleteFileId;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========DELETE DATA Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.fileId instanceof Array&&r.storageId&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n={fileIds:r.fileId},p=p+"/"+r.storageId,s.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),h(f),[3,5];case 5:return[2]}})})})},e.prototype.getListData=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.listingData;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========LISTING DATA Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.folderPath&&r.refId&&r.storageId&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n={refId:r.refId,path:r.folderPath},p=p+"/"+r.storageId,s.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),h(f),[3,5];case 5:return[2]}})})})},e.prototype.uploadDocument=function(t,r,c){var l=this,p=this.constantUrl.DMS.uploadStartPoint;return p=p+e.basePoint+(r.documentId?this.constantUrl.DMS.updateDocument:this.constantUrl.DMS.upload),new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f,d;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========UPLOAD DOCUMENT Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),s.Logger.getInstance().log("validating arguments are correct or not"),"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.documentName&&r.files&&r.folderPath&&r.refId&&r.storageId&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(p=p+"/"+r.storageId,s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n=new FormData,l={files:[],refId:r.refId,folderPath:r.folderPath},s.Logger.getInstance().log("setting up request parameters"),l.documentId=r.documentId?r.documentId:null,l.documentName=r.documentName,l.customMetadata=r.customMetaData,s.Logger.getInstance().log("Adding files in request parameters for form data"),l.files=this.filesFormData(r.files,n),n.append("uploadRequest",JSON.stringify(l)),[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return f=o.sent(),e(f),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return d=o.sent(),h(d),[3,5];case 5:return[2]}})})})},e.prototype.uploadFile=function(t,r,c){var l=this,p=this.constantUrl.DMS.uploadStartPoint+e.basePoint+this.constantUrl.DMS.upload;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f,d,g,y;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========UPLOAD FILE Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),s.Logger.getInstance().log("validating arguments are correct or not"),"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.files&&r.folderPath&&r.refId&&r.storageId&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n=new FormData,l={files:[],refId:r.refId,folderPath:r.folderPath},p=p+"/"+r.storageId,s.Logger.getInstance().log("setting up request parameters"),f=this.filesFormData(r.files,n),(y=l.files).push.apply(y,f),n.append("uploadRequest",JSON.stringify(l)),s.Logger.getInstance().log(n.getAll("files")),s.Logger.getInstance().log(n.getAll("uploadRequest")),[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return d=o.sent(),e(d),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return g=o.sent(),h(g),[3,5];case 5:return[2]}})})})},e.prototype.deleteFile=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.deleteFile;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========DO DELETE FILE/DOCUMENT Method  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),s.Logger.getInstance().log("validating arguments are correct or not"),""!==p&&"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.storageId&&r.id&&r.refId&&r.type&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),p=p+"/"+r.storageId+"/"+r.refId+"/"+r.type+"/"+r.id+"/"+(!!r.deleteWithHistory&&r.deleteWithHistory),[4,(new u.AppController).runForEndPoint({},c,p)]):[3,2];case 1:return n=o.sent(),e(n),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return l=o.sent(),h(l),[3,5];case 5:return[2]}})})})},e.prototype.updateMetaData=function(t,r,c,l,p){var h=this;return new Promise(function(f,d){return n(h,void 0,void 0,function(){var n,h,g;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("=========UPDATE DOCUMENT Metadata  =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),s.Logger.getInstance().log("validating arguments are correct or not"),""!==l&&"string"==typeof l&&r instanceof Object&&c instanceof Object&&r.customMetaData&&r.id&&r.refId&&r.storageId&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),l=e.basePoint+"/"+l+"/"+r.storageId,n={refId:r.refId,type:p,id:r.id,metadata:r.customMetaData},[4,(new u.AppController).runForEndPoint(n,c,l)]):[3,2];case 1:return h=o.sent(),f(h),[3,3];case 2:f(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return g=o.sent(),d(g),[3,5];case 5:return[2]}})})})},e.prototype.getFilesForFolder=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.fetchForFolder;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("========= getFilesByPath =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),s.Logger.getInstance().log("validating arguments are correct or not"),""!==p&&"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.refId&&r.storageId&&r.path&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),p=p+"/"+r.storageId,n={refId:r.refId,path:r.path},[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),h(f),[3,5];case 5:return[2]}})})})},e.prototype.getFilesForDocument=function(t,r,c){var l=this,p=e.basePoint+this.constantUrl.DMS.fetchForDocument;return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("========= getFilesForDocument =========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),s.Logger.getInstance().log("validating arguments are correct or not"),""!==p&&"string"==typeof p&&r instanceof Object&&c instanceof Object&&r.refId&&r.storageId&&r.path&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),p=p+"/"+r.storageId,n={refId:r.refId,path:r.path,documentName:r.documentName},[4,(new u.AppController).runForEndPoint(n,c,p)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),h(f),[3,5];case 5:return[2]}})})})},e.prototype.filesFormData=function(e,t){var r=[];try{return e.forEach(function(e){t.append("files",e);var n=Object.keys(e),o={customMetadata:{}};for(var i in o.name=e.name,o.type=e.type,n)o[n[i]]=e[n[i]];r.push(o)}),r}catch(e){s.Logger.getInstance().log(e)}},e.prototype.storageId=function(t,r,c){var l=this,p=e.basePoint+"/dmsconfig/admin/get/dmsClientDetails";return new Promise(function(e,h){return n(l,void 0,void 0,function(){var n,l;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),s.Logger.getInstance().log("========Do STORAGE METHOD=========="),s.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(a.EnvironmentStore.getInstance().setEnvironment(t),s.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),s.Logger.getInstance().log("validating arguments are correct or not"),""!==p&&"string"==typeof p&&c instanceof Object&&r instanceof Object&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(s.Logger.getInstance().log("setting up request headers"),c.orgId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),[4,(new u.AppController).runForEndPoint({},c,p)]):[3,2];case 1:return n=o.sent(),s.Logger.getInstance().log(c),s.Logger.getInstance().log(p),s.Logger.getInstance().log(n),e(n),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return l=o.sent(),h(l),[3,5];case 5:return[2]}})})})},e.instance=new e,e}();t.DocumentManager=l},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(19),s=r(20),a=r(12),u=r(4),c=function(){function e(){this.requestController=new s.RequestController,this.networkController=new i.NetworkController,this.serviceController=new a.ServiceController}return e.prototype.run=function(e,t){return n(this,void 0,void 0,function(){var r;return o(this,function(n){switch(n.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),n.label=1;case 1:return n.trys.push([1,3,,4]),u.Logger.getInstance().log("Request Mapped to Platware Request"),u.Logger.getInstance().log("Invloking service controller class method DoCall()"),r=this.requestController.mapToPlatwareRequest(e,t),[4,this.serviceController.doCall(r,t)];case 2:return[2,n.sent()];case 3:throw n.sent();case 4:return[2]}})})},e.prototype.runForEndPoint=function(e,t,r){return n(this,void 0,void 0,function(){var n;return o(this,function(o){switch(o.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),o.label=1;case 1:return o.trys.push([1,3,,4]),n=this.requestController.mapToPlatwareRequestUrl(e,t,r),[4,this.serviceController.doEndPointCall(n)];case 2:return[2,o.sent()];case 3:throw o.sent();case 4:return[2]}})})},e}();t.AppController=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(35),o=r(13),i=r(36),s=r(37),a=r(4),u=function(){function e(){}return e.prototype.doCall=function(e){return this.setNetwotkAPI(),this.doNetworkCall(e)},e.prototype.setNetwotkAPI=function(){var e=o.AppConfigStore.getInstance().getConfiguration().networkDriver;switch(a.Logger.getInstance().log("setting network Driver",e),e){case"FETCH":this.networkApi=new n.FetchWrapper,a.Logger.getInstance().log("Using Fetch Driver");break;case"AXIOS":this.networkApi=new i.AxiosWrapper,a.Logger.getInstance().log("Using AXIOS Driver");break;case"XMLHTTP":this.networkApi=new s.XmlHttpWrapper,a.Logger.getInstance().log("Using XMLHTTP Driver");break;default:this.networkApi=new n.FetchWrapper,a.Logger.getInstance().log("Network API doesn't match to passed configuartion")}},e.prototype.doNetworkCall=function(e){return a.Logger.getInstance().log("Calling Post method of Network API",e),this.networkApi.doPostCall(e)},e}();t.NetworkController=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(21),o=r(39),i=r(40),s=r(41),a=r(1),u=r(8),c=r(5),l=r(23),p=r(43),h=r(44),f=function(){function e(){this.registartionService=new n.RegistrationService,this.gatewayService=new o.GatewayService,this.authService=new i.AuthService,this.prepareRequest=new s.PrepareRequest,this.requestUtility=new a.RequestUtility,this.setPWRequest=new l.SetPWRequest}return e.prototype.initRequest=function(){this.requestUtility.handleGUID()},e.prototype.getRegistrationRequest=function(e){return this.registartionService.getRegistrartionRequest(e)},e.prototype.getGatewayRequest=function(e){return this.gatewayService.getRequestService(e)},e.prototype.getAuthRequest=function(e){return this.authService.getAuthRequest(e)},e.prototype.getEndPointRequest=function(e){return(new h.EndPointService).getRequestService(e)},e.prototype.mapToPlatwareRequest=function(e,t){try{return this.initRequest(),this.prepareRequest.mapToPlatwareRequest(e,t)}catch(e){throw u.ErrorHandler.getErrors(c.ErrorConstant.REQUESTINVALID)}},e.prototype.mapToPlatwareRequestUrl=function(e,t,r){try{return this.initRequest(),(new p.PrepareRequestForEndPoint).mapToPlatwareRequestEndPoint(e,t,r)}catch(e){throw u.ErrorHandler.getErrors(c.ErrorConstant.REQUESTINVALID)}},e}();t.RequestController=f},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(9),s=r(0),a=r(10),u=r(1),c=r(11),l=function(){function e(){this.security=new s.Security,this.platwareHeaderandBody=new i.PlatwareRequestModel,this.requestUtility=new u.RequestUtility,this.dateParsing=new a.DateParsing}return e.prototype.getRegistrartionRequest=function(e){return n(this,void 0,void 0,function(){var t,r;return o(this,function(n){switch(n.label){case 0:return t=this.reqReqData(e),[4,this.requestUtility.fingerprint()];case 1:return r=n.sent(),this.requestProperty=new c.RequestProprty(t,r),this.setBodyInterfaceKeys(t),this.setHeaderInterfaceKeys(t),this.setRegisterHeaders(this.requestProperty.getCurrentDate,this.requestProperty.getCurrentNounce,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getNounce,this.requestProperty.getEnvProp),this.setRegisterBody(this.requestProperty.getWindowNavigator,this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,t,this.requestProperty.getEnvProp),[2,this.getPWRequest()]}})})},e.prototype.reqReqData=function(e){return{url:"/register",envProps:e.envProps,reqData:{interfaces:{},services:{REGISTERAPP:[{}]}}}},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setRegisterHeaders=function(e,t,r,n,o,i){var s=(t.toString()+i.secureKey).substring(0,32),a=i.orgId+"~"+i.appId+"~"+r+":app:"+t,u=this.security.aesEncryption.getEncryption(a,s);this.platwareHeaderandBody.pwRequest.PWHeader.txnkey="",this.platwareHeaderandBody.pwRequest.PWHeader.authorization="Basic "+u;var c=this.security.aesEncryption.getHashValue("Basic "+u,i.secureKey);this.platwareHeaderandBody.pwRequest.PWHeader.hash=c,this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid("--",r,e,i),this.platwareHeaderandBody.pwRequest.PWHeader.nounce=o,this.setHeaderKeys(n,r,i,"PR_PR")},e.prototype.setRegisterBody=function(e,t,r,n,o){this.setInterface(t,e,r,o),this.platwareHeaderandBody.pwRequest.PWBody.services=n.reqData.services},e.prototype.setHeaderKeys=function(e,t,r,i){return n(this,void 0,void 0,function(){return o(this,function(n){return this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=i,[2]})})},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return this.platwareHeaderandBody.pwRequest},e}();t.RegistrationService=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.setapiType=function(e){this.apiType=e},e.prototype.getapiType=function(){return this.apiType},e}();t.ApiType=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(9),o=function(){function e(){this.pwRequest=new n.PlatwareRequestModel}return e.prototype.setPWRequest=function(){this.pwRequest=new n.PlatwareRequestModel},e}();t.SetPWRequest=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(49),o=r(50),i=r(51),s=r(52),a=function(){this.networkValidators=new i.NetworkValidation,this.argumentsValidators=new n.ArgumentsValidation,this.requestValidation=new s.PrepareDataValidation,this.httpParameterValidator=new o.HttpParameterValidation};t.Validators=a},function(e,t,r){(function(t){e.exports=t.Library=r(26)}).call(this,r(15))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(4),s=r(13),a=r(3),u=r(24),c=r(55),l=r(18),p=r(17),h=r(56),f=r(6),d=r(2),g=r(0),y=function(){function e(){}return e.prototype.executeApi=function(e,t,r,n){try{i.Logger.getInstance().log("=========Calling Execute Api Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not"),(new u.Validators).argumentsValidators.isValidArguments(arguments)&&(i.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(a.EnvironmentStore.getInstance().setEnvironment(e.enviornment||e),i.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),i.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),(new l.AppController).run(t,r).then(function(e){return n(e)}).catch(function(e){return n(e)}))}catch(e){throw i.Logger.getInstance().error(e),f.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doPost=function(e,t,r){i.Logger.getInstance().log("=========Inside Do Post Api Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not");try{if((new u.Validators).argumentsValidators.isValidArguments(arguments,!0))return i.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(a.EnvironmentStore.getInstance().setEnvironment(e),i.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),i.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),new Promise(function(e,n){(new l.AppController).run(t,r).then(function(t){(new h.FilterResponse).filterResponse(t).then(function(t){e(t)}).catch(function(e){n(e)})}).catch(function(e){n(e)})})}catch(e){throw f.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doPostByUrl=function(e,t,r,s){var u=this;return new Promise(function(c,p){return n(u,void 0,void 0,function(){var n,u;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),i.Logger.getInstance().log("=========DO POSTBYURL Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not"),""!==s&&"string"==typeof s&&t instanceof Object&&r instanceof Object?(void 0!==e&&(a.EnvironmentStore.getInstance().setEnvironment(e),i.Logger.getInstance().log(a.EnvironmentStore.getInstance().getEnvironment())),[4,(new l.AppController).runForEndPoint(t,r,s)]):[3,2];case 1:return n=o.sent(),c(n),[3,3];case 2:c(f.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return u=o.sent(),p(u),[3,5];case 5:return[2]}})})})},e.prototype.config=function(e){i.Logger.getInstance().log("Configuration Passed to API GATEWAY CLIENT => ",e);try{s.AppConfigStore.getInstance().setConfiguration(e)}catch(t){i.Logger.getInstance().error("Error in Setting the Configuration of API GATEWAY CLIENT ==> It can be due to wrong configuration passed",e)}},e.prototype.webWorker=function(e){console.log(Worker);var t=new c.WebWorkerWrapper;t&&(t.postMessage(e),t.onMessage(function(e){console.log("worker1",e)}))},e.prototype.getStorageAPI=function(){return d.Storage.getInstance()},e.prototype.getEncryptionAPI=function(){return new g.Security},e.prototype.getDMSAPI=function(){return p.DocumentManager.getInstance()},e}();t.APIGateway=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,"log",{get:function(){return this.isLogger?console.log.bind(this,"%clog ==>","color:"+this.colorLog("log")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"info",{get:function(){return this.isLogger?console.info.bind(this,"%cinfo ==>","color:"+this.colorLog("info")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"warn",{get:function(){return this.isLogger?console.warn.bind(this,"%cwarn ==>","color:"+this.colorLog("warn")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){return this.isLogger?console.error.bind(this,"%cwarn ==>","color:"+this.colorLog("warn")):function(){}},enumerable:!0,configurable:!0}),e.prototype.setLogger=function(e){this.isLogger=e},e.prototype.colorLog=function(e,t){switch(t=t||"black",e){case"log":t="Green";break;case"info":t="DodgerBlue";break;case"error":t="Red";break;case"warn":t="Orange"}return t},e}();t.CustomConsole=n},function(e,t,r){(function(t){var r;e.exports=function e(t,n,o){function i(a,u){if(!n[a]){if(!t[a]){if(!u&&"function"==typeof r&&r)return r(a,!0);if(s)return s(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){var r=t[a][1][e];return i(r||e)},l,l.exports,e,t,n,o)}return n[a].exports}for(var s="function"==typeof r&&r,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(e,r,n){(function(e){"use strict";var t,n,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var i=0,s=new o(l),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),t=function(){a.data=i=++i%2}}else if(e.setImmediate||void 0===e.MessageChannel)t="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){l(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(l,0)};else{var u=new e.MessageChannel;u.port1.onmessage=l,t=function(){u.port2.postMessage(0)}}var c=[];function l(){var e,t;n=!0;for(var r=c.length;r;){for(t=c,c=[],e=-1;++e<r;)t[e]();r=c.length}n=!1}r.exports=function(e){1!==c.push(e)||n||t()}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,r){"use strict";var n=e(1);function o(){}var i={},s=["REJECTED"],a=["FULFILLED"],u=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==o&&f(this,e)}function l(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function p(e,t,r){n(function(){var n;try{n=t(r)}catch(t){return i.reject(e,t)}n===e?i.reject(e,new TypeError("Cannot resolve promise with itself")):i.resolve(e,n)})}function h(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function f(e,t){var r=!1;function n(t){r||(r=!0,i.reject(e,t))}function o(t){r||(r=!0,i.resolve(e,t))}var s=d(function(){t(o,n)});"error"===s.status&&n(s.value)}function d(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}t.exports=c,c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(o);return this.state!==u?p(r,this.state===a?e:t,this.outcome):this.queue.push(new l(r,e,t)),r},l.prototype.callFulfilled=function(e){i.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){p(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){i.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){p(this.promise,this.onRejected,e)},i.resolve=function(e,t){var r=d(h,t);if("error"===r.status)return i.reject(e,r.value);var n=r.value;if(n)f(e,n);else{e.state=a,e.outcome=t;for(var o=-1,s=e.queue.length;++o<s;)e.queue[o].callFulfilled(t)}return e},i.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:i.resolve(new this(o),e)},c.reject=function(e){var t=new this(o);return i.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var s=new Array(r),a=0,u=-1,c=new this(o);++u<r;)l(e[u],u);return c;function l(e,o){t.resolve(e).then(function(e){s[o]=e,++a!==r||n||(n=!0,i.resolve(c,s))},function(e){n||(n=!0,i.reject(c,e))})}},c.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var s,a=-1,u=new this(o);++a<r;)s=e[a],t.resolve(s).then(function(e){n||(n=!0,i.resolve(u,e))},function(e){n||(n=!0,i.reject(u,e))});return u}},{1:1}],3:[function(e,r,n){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function i(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var r=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),n=0;n<e.length;n+=1)r.append(e[n]);return r.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var s=Promise;function a(e,t){t&&e.then(function(e){t(null,e)},function(e){t(e)})}function u(e,t,r){"function"==typeof t&&e.then(t),"function"==typeof r&&e.catch(r)}function c(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function l(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var p="local-forage-detect-blob-support",h=void 0,f={},d=Object.prototype.toString,g="readonly",y="readwrite";function v(e){return"boolean"==typeof h?s.resolve(h):function(e){return new s(function(t){var r=e.transaction(p,y),n=i([""]);r.objectStore(p).put(n,"key"),r.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},r.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),r=navigator.userAgent.match(/Edge\//);t(r||!e||parseInt(e[1],10)>=43)}}).catch(function(){return!1})}(e).then(function(e){return h=e})}function m(e){var t=f[e.name],r={};r.promise=new s(function(e,t){r.resolve=e,r.reject=t}),t.deferredOperations.push(r),t.dbReady?t.dbReady=t.dbReady.then(function(){return r.promise}):t.dbReady=r.promise}function w(e){var t=f[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function b(e,t){var r=f[e.name].deferredOperations.pop();if(r)return r.reject(t),r.promise}function I(e,t){return new s(function(r,n){if(f[e.name]=f[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return r(e.db);m(e),e.db.close()}var i=[e.name];t&&i.push(e.version);var s=o.open.apply(o,i);t&&(s.onupgradeneeded=function(t){var r=s.result;try{r.createObjectStore(e.storeName),t.oldVersion<=1&&r.createObjectStore(p)}catch(r){if("ConstraintError"!==r.name)throw r;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),s.onerror=function(e){e.preventDefault(),n(s.error)},s.onsuccess=function(){r(s.result),w(e)}})}function E(e){return I(e,!1)}function S(e){return I(e,!0)}function P(e,t){if(!e.db)return!0;var r=!e.db.objectStoreNames.contains(e.storeName),n=e.version<e.db.version,o=e.version>e.db.version;if(n&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||r){if(r){var i=e.db.version+1;i>e.version&&(e.version=i)}return!0}return!1}function R(e){return i([function(e){for(var t=e.length,r=new ArrayBuffer(t),n=new Uint8Array(r),o=0;o<t;o++)n[o]=e.charCodeAt(o);return r}(atob(e.data))],{type:e.type})}function _(e){return e&&e.__local_forage_encoded_blob}function A(e){var t=this,r=t._initReady().then(function(){var e=f[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady});return u(r,e,e),r}function O(e,t,r,n){void 0===n&&(n=1);try{var o=e.db.transaction(e.storeName,t);r(null,o)}catch(o){if(n>0&&(!e.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return s.resolve().then(function(){if(!e.db||"NotFoundError"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),S(e)}).then(function(){return function(e){m(e);for(var t=f[e.name],r=t.forages,n=0;n<r.length;n++){var o=r[n];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,E(e).then(function(t){return e.db=t,P(e)?S(e):t}).then(function(n){e.db=t.db=n;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=n}).catch(function(t){throw b(e,t),t})}(e).then(function(){O(e,t,r,n-1)})}).catch(r);r(o)}}var C={_driver:"asyncStorage",_initStorage:function(e){var t=this,r={db:null};if(e)for(var n in e)r[n]=e[n];var o=f[r.name];o||(o={forages:[],db:null,dbReady:null,deferredOperations:[]},f[r.name]=o),o.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=A);var i=[];function a(){return s.resolve()}for(var u=0;u<o.forages.length;u++){var c=o.forages[u];c!==t&&i.push(c._initReady().catch(a))}var l=o.forages.slice(0);return s.all(i).then(function(){return r.db=o.db,E(r)}).then(function(e){return r.db=e,P(r,t._defaultConfig.version)?S(r):e}).then(function(e){r.db=o.db=e,t._dbInfo=r;for(var n=0;n<l.length;n++){var i=l[n];i!==t&&(i._dbInfo.db=r.db,i._dbInfo.version=r.version)}})},_support:function(){try{if(!o)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var r=this,n=new s(function(t,n){r.ready().then(function(){O(r._dbInfo,g,function(o,i){if(o)return n(o);try{var s=i.objectStore(r._dbInfo.storeName).openCursor(),a=1;s.onsuccess=function(){var r=s.result;if(r){var n=r.value;_(n)&&(n=R(n));var o=e(n,r.key,a++);void 0!==o?t(o):r.continue()}else t()},s.onerror=function(){n(s.error)}}catch(e){n(e)}})}).catch(n)});return a(n,t),n},getItem:function(e,t){var r=this;e=c(e);var n=new s(function(t,n){r.ready().then(function(){O(r._dbInfo,g,function(o,i){if(o)return n(o);try{var s=i.objectStore(r._dbInfo.storeName).get(e);s.onsuccess=function(){var e=s.result;void 0===e&&(e=null),_(e)&&(e=R(e)),t(e)},s.onerror=function(){n(s.error)}}catch(e){n(e)}})}).catch(n)});return a(n,t),n},setItem:function(e,t,r){var n=this;e=c(e);var o=new s(function(r,o){var i;n.ready().then(function(){return i=n._dbInfo,"[object Blob]"===d.call(t)?v(i.db).then(function(e){return e?t:(r=t,new s(function(e,t){var n=new FileReader;n.onerror=t,n.onloadend=function(t){var n=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:n,type:r.type})},n.readAsBinaryString(r)}));var r}):t}).then(function(t){O(n._dbInfo,y,function(i,s){if(i)return o(i);try{var a=s.objectStore(n._dbInfo.storeName);null===t&&(t=void 0);var u=a.put(t,e);s.oncomplete=function(){void 0===t&&(t=null),r(t)},s.onabort=s.onerror=function(){var e=u.error?u.error:u.transaction.error;o(e)}}catch(e){o(e)}})}).catch(o)});return a(o,r),o},removeItem:function(e,t){var r=this;e=c(e);var n=new s(function(t,n){r.ready().then(function(){O(r._dbInfo,y,function(o,i){if(o)return n(o);try{var s=i.objectStore(r._dbInfo.storeName).delete(e);i.oncomplete=function(){t()},i.onerror=function(){n(s.error)},i.onabort=function(){var e=s.error?s.error:s.transaction.error;n(e)}}catch(e){n(e)}})}).catch(n)});return a(n,t),n},clear:function(e){var t=this,r=new s(function(e,r){t.ready().then(function(){O(t._dbInfo,y,function(n,o){if(n)return r(n);try{var i=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=i.error?i.error:i.transaction.error;r(e)}}catch(e){r(e)}})}).catch(r)});return a(r,e),r},length:function(e){var t=this,r=new s(function(e,r){t.ready().then(function(){O(t._dbInfo,g,function(n,o){if(n)return r(n);try{var i=o.objectStore(t._dbInfo.storeName).count();i.onsuccess=function(){e(i.result)},i.onerror=function(){r(i.error)}}catch(e){r(e)}})}).catch(r)});return a(r,e),r},key:function(e,t){var r=this,n=new s(function(t,n){e<0?t(null):r.ready().then(function(){O(r._dbInfo,g,function(o,i){if(o)return n(o);try{var s=i.objectStore(r._dbInfo.storeName),a=!1,u=s.openCursor();u.onsuccess=function(){var r=u.result;r?0===e?t(r.key):a?t(r.key):(a=!0,r.advance(e)):t(null)},u.onerror=function(){n(u.error)}}catch(e){n(e)}})}).catch(n)});return a(n,t),n},keys:function(e){var t=this,r=new s(function(e,r){t.ready().then(function(){O(t._dbInfo,g,function(n,o){if(n)return r(n);try{var i=o.objectStore(t._dbInfo.storeName).openCursor(),s=[];i.onsuccess=function(){var t=i.result;t?(s.push(t.key),t.continue()):e(s)},i.onerror=function(){r(i.error)}}catch(e){r(e)}})}).catch(r)});return a(r,e),r},dropInstance:function(e,t){t=l.apply(this,arguments);var r,n=this.config();if((e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName),e.name){var i=e.name===n.name&&this._dbInfo.db?s.resolve(this._dbInfo.db):E(e).then(function(t){var r=f[e.name],n=r.forages;r.db=t;for(var o=0;o<n.length;o++)n[o]._dbInfo.db=t;return t});r=e.storeName?i.then(function(t){if(t.objectStoreNames.contains(e.storeName)){var r=t.version+1;m(e);var n=f[e.name],i=n.forages;t.close();for(var a=0;a<i.length;a++){var u=i[a];u._dbInfo.db=null,u._dbInfo.version=r}return new s(function(t,n){var i=o.open(e.name,r);i.onerror=function(e){i.result.close(),n(e)},i.onupgradeneeded=function(){i.result.deleteObjectStore(e.storeName)},i.onsuccess=function(){var e=i.result;e.close(),t(e)}}).then(function(e){n.db=e;for(var t=0;t<i.length;t++){var r=i[t];r._dbInfo.db=e,w(r._dbInfo)}}).catch(function(t){throw(b(e,t)||s.resolve()).catch(function(){}),t})}}):i.then(function(t){m(e);var r=f[e.name],n=r.forages;t.close();for(var i=0;i<n.length;i++)n[i]._dbInfo.db=null;return new s(function(t,r){var n=o.deleteDatabase(e.name);n.onerror=n.onblocked=function(e){var t=n.result;t&&t.close(),r(e)},n.onsuccess=function(){var e=n.result;e&&e.close(),t(e)}}).then(function(e){r.db=e;for(var t=0;t<n.length;t++)w(n[t]._dbInfo)}).catch(function(t){throw(b(e,t)||s.resolve()).catch(function(){}),t})})}else r=s.reject("Invalid arguments");return a(r,t),r}},D="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",q="~~local_forage_type~",k=/^~~local_forage_type~([^~]+)~/,T="__lfsc__:",B=T.length,N="arbf",H="blob",x="si08",L="ui08",U="uic8",M="si16",W="si32",j="ur16",K="ui32",F="fl32",V="fl64",G=B+N.length,z=Object.prototype.toString;function J(e){var t,r,n,o,i,s=.75*e.length,a=e.length,u=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var c=new ArrayBuffer(s),l=new Uint8Array(c);for(t=0;t<a;t+=4)r=D.indexOf(e[t]),n=D.indexOf(e[t+1]),o=D.indexOf(e[t+2]),i=D.indexOf(e[t+3]),l[u++]=r<<2|n>>4,l[u++]=(15&n)<<4|o>>2,l[u++]=(3&o)<<6|63&i;return c}function Y(e){var t,r=new Uint8Array(e),n="";for(t=0;t<r.length;t+=3)n+=D[r[t]>>2],n+=D[(3&r[t])<<4|r[t+1]>>4],n+=D[(15&r[t+1])<<2|r[t+2]>>6],n+=D[63&r[t+2]];return r.length%3==2?n=n.substring(0,n.length-1)+"=":r.length%3==1&&(n=n.substring(0,n.length-2)+"=="),n}var X={serialize:function(e,t){var r="";if(e&&(r=z.call(e)),e&&("[object ArrayBuffer]"===r||e.buffer&&"[object ArrayBuffer]"===z.call(e.buffer))){var n,o=T;e instanceof ArrayBuffer?(n=e,o+=N):(n=e.buffer,"[object Int8Array]"===r?o+=x:"[object Uint8Array]"===r?o+=L:"[object Uint8ClampedArray]"===r?o+=U:"[object Int16Array]"===r?o+=M:"[object Uint16Array]"===r?o+=j:"[object Int32Array]"===r?o+=W:"[object Uint32Array]"===r?o+=K:"[object Float32Array]"===r?o+=F:"[object Float64Array]"===r?o+=V:t(new Error("Failed to get type for BinaryArray"))),t(o+Y(n))}else if("[object Blob]"===r){var i=new FileReader;i.onload=function(){var r=q+e.type+"~"+Y(this.result);t(T+H+r)},i.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(r){console.error("Couldn't convert value into a JSON string: ",e),t(null,r)}},deserialize:function(e){if(e.substring(0,B)!==T)return JSON.parse(e);var t,r=e.substring(G),n=e.substring(B,G);if(n===H&&k.test(r)){var o=r.match(k);t=o[1],r=r.substring(o[0].length)}var s=J(r);switch(n){case N:return s;case H:return i([s],{type:t});case x:return new Int8Array(s);case L:return new Uint8Array(s);case U:return new Uint8ClampedArray(s);case M:return new Int16Array(s);case j:return new Uint16Array(s);case W:return new Int32Array(s);case K:return new Uint32Array(s);case F:return new Float32Array(s);case V:return new Float64Array(s);default:throw new Error("Unkown type: "+n)}},stringToBuffer:J,bufferToString:Y};function Z(e,t,r,n){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],r,n)}function Q(e,t,r,n,o,i){e.executeSql(r,n,o,function(e,s){s.code===s.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],function(e,a){a.rows.length?i(e,s):Z(e,t,function(){e.executeSql(r,n,o,i)},i)},i):i(e,s)},i)}function $(e,t,r,n){var o=this;e=c(e);var i=new s(function(i,s){o.ready().then(function(){void 0===t&&(t=null);var a=t,u=o._dbInfo;u.serializer.serialize(t,function(t,c){c?s(c):u.db.transaction(function(r){Q(r,u,"INSERT OR REPLACE INTO "+u.storeName+" (key, value) VALUES (?, ?)",[e,t],function(){i(a)},function(e,t){s(t)})},function(t){if(t.code===t.QUOTA_ERR){if(n>0)return void i($.apply(o,[e,a,r,n-1]));s(t)}})})}).catch(s)});return a(i,r),i}var ee={_driver:"webSQLStorage",_initStorage:function(e){var t=this,r={db:null};if(e)for(var n in e)r[n]="string"!=typeof e[n]?e[n].toString():e[n];var o=new s(function(e,n){try{r.db=openDatabase(r.name,String(r.version),r.description,r.size)}catch(e){return n(e)}r.db.transaction(function(o){Z(o,r,function(){t._dbInfo=r,e()},function(e,t){n(t)})},n)});return r.serializer=X,o},_support:"function"==typeof openDatabase,iterate:function(e,t){var r=this,n=new s(function(t,n){r.ready().then(function(){var o=r._dbInfo;o.db.transaction(function(r){Q(r,o,"SELECT * FROM "+o.storeName,[],function(r,n){for(var i=n.rows,s=i.length,a=0;a<s;a++){var u=i.item(a),c=u.value;if(c&&(c=o.serializer.deserialize(c)),void 0!==(c=e(c,u.key,a+1)))return void t(c)}t()},function(e,t){n(t)})})}).catch(n)});return a(n,t),n},getItem:function(e,t){var r=this;e=c(e);var n=new s(function(t,n){r.ready().then(function(){var o=r._dbInfo;o.db.transaction(function(r){Q(r,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],function(e,r){var n=r.rows.length?r.rows.item(0).value:null;n&&(n=o.serializer.deserialize(n)),t(n)},function(e,t){n(t)})})}).catch(n)});return a(n,t),n},setItem:function(e,t,r){return $.apply(this,[e,t,r,1])},removeItem:function(e,t){var r=this;e=c(e);var n=new s(function(t,n){r.ready().then(function(){var o=r._dbInfo;o.db.transaction(function(r){Q(r,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[e],function(){t()},function(e,t){n(t)})})}).catch(n)});return a(n,t),n},clear:function(e){var t=this,r=new s(function(e,r){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(t){Q(t,n,"DELETE FROM "+n.storeName,[],function(){e()},function(e,t){r(t)})})}).catch(r)});return a(r,e),r},length:function(e){var t=this,r=new s(function(e,r){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(t){Q(t,n,"SELECT COUNT(key) as c FROM "+n.storeName,[],function(t,r){var n=r.rows.item(0).c;e(n)},function(e,t){r(t)})})}).catch(r)});return a(r,e),r},key:function(e,t){var r=this,n=new s(function(t,n){r.ready().then(function(){var o=r._dbInfo;o.db.transaction(function(r){Q(r,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],function(e,r){var n=r.rows.length?r.rows.item(0).key:null;t(n)},function(e,t){n(t)})})}).catch(n)});return a(n,t),n},keys:function(e){var t=this,r=new s(function(e,r){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(t){Q(t,n,"SELECT key FROM "+n.storeName,[],function(t,r){for(var n=[],o=0;o<r.rows.length;o++)n.push(r.rows.item(o).key);e(n)},function(e,t){r(t)})})}).catch(r)});return a(r,e),r},dropInstance:function(e,t){t=l.apply(this,arguments);var r=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var n,o=this;return a(n=e.name?new s(function(t){var n;n=e.name===r.name?o._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:n,storeNames:[e.storeName]}):t(function(e){return new s(function(t,r){e.transaction(function(n){n.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(r,n){for(var o=[],i=0;i<n.rows.length;i++)o.push(n.rows.item(i).name);t({db:e,storeNames:o})},function(e,t){r(t)})},function(e){r(e)})})}(n))}).then(function(e){return new s(function(t,r){e.db.transaction(function(n){function o(e){return new s(function(t,r){n.executeSql("DROP TABLE IF EXISTS "+e,[],function(){t()},function(e,t){r(t)})})}for(var i=[],a=0,u=e.storeNames.length;a<u;a++)i.push(o(e.storeNames[a]));s.all(i).then(function(){t()}).catch(function(e){r(e)})},function(e){r(e)})})}):s.reject("Invalid arguments"),t),n}};function te(e,t){var r=e.name+"/";return e.storeName!==t.storeName&&(r+=e.storeName+"/"),r}function re(){return!function(){try{return localStorage.setItem("_localforage_support_test",!0),localStorage.removeItem("_localforage_support_test"),!1}catch(e){return!0}}()||localStorage.length>0}var ne={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var r in e)t[r]=e[r];return t.keyPrefix=te(e,this._defaultConfig),re()?(this._dbInfo=t,t.serializer=X,s.resolve()):s.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var r=this,n=r.ready().then(function(){for(var t=r._dbInfo,n=t.keyPrefix,o=n.length,i=localStorage.length,s=1,a=0;a<i;a++){var u=localStorage.key(a);if(0===u.indexOf(n)){var c=localStorage.getItem(u);if(c&&(c=t.serializer.deserialize(c)),void 0!==(c=e(c,u.substring(o),s++)))return c}}});return a(n,t),n},getItem:function(e,t){var r=this;e=c(e);var n=r.ready().then(function(){var t=r._dbInfo,n=localStorage.getItem(t.keyPrefix+e);return n&&(n=t.serializer.deserialize(n)),n});return a(n,t),n},setItem:function(e,t,r){var n=this;e=c(e);var o=n.ready().then(function(){void 0===t&&(t=null);var r=t;return new s(function(o,i){var s=n._dbInfo;s.serializer.serialize(t,function(t,n){if(n)i(n);else try{localStorage.setItem(s.keyPrefix+e,t),o(r)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||i(e),i(e)}})})});return a(o,r),o},removeItem:function(e,t){var r=this;e=c(e);var n=r.ready().then(function(){var t=r._dbInfo;localStorage.removeItem(t.keyPrefix+e)});return a(n,t),n},clear:function(e){var t=this,r=t.ready().then(function(){for(var e=t._dbInfo.keyPrefix,r=localStorage.length-1;r>=0;r--){var n=localStorage.key(r);0===n.indexOf(e)&&localStorage.removeItem(n)}});return a(r,e),r},length:function(e){var t=this.keys().then(function(e){return e.length});return a(t,e),t},key:function(e,t){var r=this,n=r.ready().then(function(){var t,n=r._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(n.keyPrefix.length)),t});return a(n,t),n},keys:function(e){var t=this,r=t.ready().then(function(){for(var e=t._dbInfo,r=localStorage.length,n=[],o=0;o<r;o++){var i=localStorage.key(o);0===i.indexOf(e.keyPrefix)&&n.push(i.substring(e.keyPrefix.length))}return n});return a(r,e),r},dropInstance:function(e,t){if(t=l.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var r=this.config();e.name=e.name||r.name,e.storeName=e.storeName||r.storeName}var n,o=this;return a(n=e.name?new s(function(t){e.storeName?t(te(e,o._defaultConfig)):t(e.name+"/")}).then(function(e){for(var t=localStorage.length-1;t>=0;t--){var r=localStorage.key(t);0===r.indexOf(e)&&localStorage.removeItem(r)}}):s.reject("Invalid arguments"),t),n}},oe=function(e,t){for(var r,n,o=e.length,i=0;i<o;){if((r=e[i])===(n=t)||"number"==typeof r&&"number"==typeof n&&isNaN(r)&&isNaN(n))return!0;i++}return!1},ie=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},se={},ae={},ue={INDEXEDDB:C,WEBSQL:ee,LOCALSTORAGE:ne},ce=[ue.INDEXEDDB._driver,ue.WEBSQL._driver,ue.LOCALSTORAGE._driver],le=["dropInstance"],pe=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(le),he={description:"",driver:ce.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function fe(e,t){e[t]=function(){var r=arguments;return e.ready().then(function(){return e[t].apply(e,r)})}}function de(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var r in t)t.hasOwnProperty(r)&&(ie(t[r])?arguments[0][r]=t[r].slice():arguments[0][r]=t[r])}return arguments[0]}var ge=new(function(){function e(t){for(var r in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),ue)if(ue.hasOwnProperty(r)){var n=ue[r],o=n._driver;this[r]=o,se[o]||this.defineDriver(n)}this._defaultConfig=de({},he),this._config=de({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":n(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e&&e.driver)||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,r){var n=new s(function(t,r){try{var n=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void r(o);for(var i=pe.concat("_initStorage"),u=0,c=i.length;u<c;u++){var l=i[u];if((!oe(le,l)||e[l])&&"function"!=typeof e[l])return void r(o)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),r=s.reject(t);return a(r,arguments[arguments.length-1]),r}},r=0,n=le.length;r<n;r++){var o=le[r];e[o]||(e[o]=t(o))}}();var p=function(r){se[n]&&console.info("Redefining LocalForage driver: "+n),se[n]=e,ae[n]=r,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(p,r):p(!!e._support):p(!0)}catch(e){r(e)}});return u(n,t,r),n},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,r){var n=se[e]?s.resolve(se[e]):s.reject(new Error("Driver not found."));return u(n,t,r),n},e.prototype.getSerializer=function(e){var t=s.resolve(X);return u(t,e),t},e.prototype.ready=function(e){var t=this,r=t._driverSet.then(function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready});return u(r,e,e),r},e.prototype.setDriver=function(e,t,r){var n=this;ie(e)||(e=[e]);var o=this._getSupportedDrivers(e);function i(){n._config.driver=n.driver()}function a(e){return n._extend(e),i(),n._ready=n._initStorage(n._config),n._ready}var c=null!==this._driverSet?this._driverSet.catch(function(){return s.resolve()}):s.resolve();return this._driverSet=c.then(function(){var e=o[0];return n._dbInfo=null,n._ready=null,n.getDriver(e).then(function(e){n._driver=e._driver,i(),n._wrapLibraryMethodsWithReady(),n._initDriver=function(e){return function(){var t=0;return function r(){for(;t<e.length;){var o=e[t];return t++,n._dbInfo=null,n._ready=null,n.getDriver(o).then(a).catch(r)}i();var u=new Error("No available storage method found.");return n._driverSet=s.reject(u),n._driverSet}()}}(o)})}).catch(function(){i();var e=new Error("No available storage method found.");return n._driverSet=s.reject(e),n._driverSet}),u(this._driverSet,t,r),this._driverSet},e.prototype.supports=function(e){return!!ae[e]},e.prototype._extend=function(e){de(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],r=0,n=e.length;r<n;r++){var o=e[r];this.supports(o)&&t.push(o)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=pe.length;e<t;e++)fe(this,pe[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=ge},{3:3}]},{},[4])(4)}).call(this,r(15))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.encryption=e}return e.prototype.aesUtil=function(e,t){this.keySize=e/32,this.iterationCount=t},e.prototype.generateKey=function(e,t){return this.key=this.encryption.PBKDF2(t,this.encryption.enc.Hex.parse(e),{keySize:this.keySize,iterations:this.iterationCount}),this.key},e.prototype.encrypt=function(e,t,r,n){this.key=this.generateKey(e,r),this.encrypted=this.encryption.AES.encrypt(n,this.key,{iv:this.encryption.enc.Hex.parse(t)});try{return this.encrypted.ciphertext.toString(this.encryption.enc.Base64)}catch(e){throw e}},e.prototype.decrypt=function(e,t,r,n){this.key=this.generateKey(e,r);var o=this.encryption.lib.CipherParams.create({ciphertext:this.encryption.enc.Base64.parse(n)});this.decrypted=this.encryption.AES.decrypt(o,this.key,{iv:this.encryption.enc.Hex.parse(t)});try{return this.decrypted.toString(this.encryption.enc.Utf8)}catch(e){throw e}},e.prototype.encryptText=function(e,t){var r=t;return this.aesUtil(256,100),this.encrypt("00000000000000000000000000000000","00000000000000000000000000000000",r,e)},e.prototype.decryptText=function(e,t){var r=t;return this.aesUtil(256,100),this.decrypt("00000000000000000000000000000000","00000000000000000000000000000000",r,e)},e.prototype.getHexString=function(e){return this.hexString=this.encryption.enc.Hex.parse("39563JSHUSJNS18"),this.hexString},e.prototype.getEncryption=function(e,t){return this.encryptedString=this.encryptText(e,t),this.encryptedString},e.prototype.getDecryption=function(e,t){return this.decryptedString=this.decryptText(e,t),void 0!==this.decryptedString?this.decryptedString:""},e.prototype.getHashValue=function(e,t){return this.hash=this.encryption.HmacSHA512(e,t).toString(),this.hash},e}();t.AESEncryption=n},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(window,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RSAKey=void 0,t.parseBigInt=i;var n=r(8),o=r(10);function i(e,t){return new n.BigInteger(e,t)}var s=t.RSAKey=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null};s.prototype.doPublic=function(e){return e.modPowInt(this.e,this.n)},s.prototype.setPublic=function(e,t){null!=e&&null!=t&&e.length>0&&t.length>0?(this.n=i(e,16),this.e=parseInt(t,16)):console.error("Invalid RSA public key")},s.prototype.encrypt=function(e){var t=function(e,t){if(t<e.length+11)return console.error("Message too long for RSA"),null;for(var r=[],i=e.length-1;i>=0&&t>0;){var s=e.charCodeAt(i--);s<128?r[--t]=s:s>127&&s<2048?(r[--t]=63&s|128,r[--t]=s>>6|192):(r[--t]=63&s|128,r[--t]=s>>6&63|128,r[--t]=s>>12|224)}r[--t]=0;for(var a=new o.SecureRandom,u=[];t>2;){for(u[0]=0;0==u[0];)a.nextBytes(u);r[--t]=u[0]}return r[--t]=2,r[--t]=0,new n.BigInteger(r)}(e,this.n.bitLength()+7>>3);if(null==t)return null;var r=this.doPublic(t);if(null==r)return null;var i=r.toString(16);return 0==(1&i.length)?i:"0"+i}},function(e,t,r){var n,o,i;e.exports=(i=i||function(e,t){var r=Object.create||function(){function e(){}return function(t){var r;return e.prototype=t,r=new e,e.prototype=null,r}}(),n={},o=n.lib={},i=o.Base={extend:function(e){var t=r(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},s=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||u).stringify(this)},concat:function(e){var t=this.words,r=e.words,n=this.sigBytes,o=e.sigBytes;if(this.clamp(),n%4)for(var i=0;i<o;i++){var s=r[i>>>2]>>>24-i%4*8&255;t[n+i>>>2]|=s<<24-(n+i)%4*8}else for(i=0;i<o;i+=4)t[n+i>>>2]=r[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,r=this.sigBytes;t[r>>>2]&=4294967295<<32-r%4*8,t.length=e.ceil(r/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var r,n=[],o=function(t){t=t;var r=987654321,n=4294967295;return function(){var o=((r=36969*(65535&r)+(r>>16)&n)<<16)+(t=18e3*(65535&t)+(t>>16)&n)&n;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},i=0;i<t;i+=4){var a=o(4294967296*(r||e.random()));r=987654071*a(),n.push(4294967296*a()|0)}return new s.init(n,t)}}),a=n.enc={},u=a.Hex={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],o=0;o<r;o++){var i=t[o>>>2]>>>24-o%4*8&255;n.push((i>>>4).toString(16)),n.push((15&i).toString(16))}return n.join("")},parse:function(e){for(var t=e.length,r=[],n=0;n<t;n+=2)r[n>>>3]|=parseInt(e.substr(n,2),16)<<24-n%8*4;return new s.init(r,t/2)}},c=a.Latin1={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],o=0;o<r;o++){var i=t[o>>>2]>>>24-o%4*8&255;n.push(String.fromCharCode(i))}return n.join("")},parse:function(e){for(var t=e.length,r=[],n=0;n<t;n++)r[n>>>2]|=(255&e.charCodeAt(n))<<24-n%4*8;return new s.init(r,t)}},l=a.Utf8={stringify:function(e){try{return decodeURIComponent(escape(c.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return c.parse(unescape(encodeURIComponent(e)))}},p=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=l.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var r=this._data,n=r.words,o=r.sigBytes,i=this.blockSize,a=o/(4*i),u=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*i,c=e.min(4*u,o);if(u){for(var l=0;l<u;l+=i)this._doProcessBlock(n,l);var p=n.splice(0,u);r.sigBytes-=c}return new s.init(p,c)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),h=(o.Hasher=p.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){p.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,r){return new e.init(r).finalize(t)}},_createHmacHelper:function(e){return function(t,r){return new h.HMAC.init(e,r).finalize(t)}}}),n.algo={});return n}(Math),o=(n=i).lib.WordArray,n.enc.Base64={stringify:function(e){var t=e.words,r=e.sigBytes,n=this._map;e.clamp();for(var o=[],i=0;i<r;i+=3)for(var s=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,a=0;a<4&&i+.75*a<r;a++)o.push(n.charAt(s>>>6*(3-a)&63));var u=n.charAt(64);if(u)for(;o.length%4;)o.push(u);return o.join("")},parse:function(e){var t=e.length,r=this._map,n=this._reverseMap;if(!n){n=this._reverseMap=[];for(var i=0;i<r.length;i++)n[r.charCodeAt(i)]=i}var s=r.charAt(64);if(s){var a=e.indexOf(s);-1!==a&&(t=a)}return function(e,t,r){for(var n=[],i=0,s=0;s<t;s++)if(s%4){var a=r[e.charCodeAt(s-1)]<<s%4*2,u=r[e.charCodeAt(s)]>>>6-s%4*2;n[i>>>2]|=(a|u)<<24-i%4*8,i++}return o.create(n,i)}(e,t,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},function(){var e=i,t=e.lib.Base,r=e.enc.Utf8;e.algo.HMAC=t.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=r.parse(t));var n=e.blockSize,o=4*n;t.sigBytes>o&&(t=e.finalize(t)),t.clamp();for(var i=this._oKey=t.clone(),s=this._iKey=t.clone(),a=i.words,u=s.words,c=0;c<n;c++)a[c]^=1549556828,u[c]^=909522486;i.sigBytes=s.sigBytes=o,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,r=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(r))}})}(),function(){var e=i,t=e.lib,r=t.WordArray,n=t.Hasher,o=e.algo,s=[],a=o.SHA1=n.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var r=this._hash.words,n=r[0],o=r[1],i=r[2],a=r[3],u=r[4],c=0;c<80;c++){if(c<16)s[c]=0|e[t+c];else{var l=s[c-3]^s[c-8]^s[c-14]^s[c-16];s[c]=l<<1|l>>>31}var p=(n<<5|n>>>27)+u+s[c];p+=c<20?1518500249+(o&i|~o&a):c<40?1859775393+(o^i^a):c<60?(o&i|o&a|i&a)-1894007588:(o^i^a)-899497514,u=a,a=i,i=o<<30|o>>>2,o=n,n=p}r[0]=r[0]+n|0,r[1]=r[1]+o|0,r[2]=r[2]+i|0,r[3]=r[3]+a|0,r[4]=r[4]+u|0},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;return t[n>>>5]|=128<<24-n%32,t[14+(n+64>>>9<<4)]=Math.floor(r/4294967296),t[15+(n+64>>>9<<4)]=r,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA1=n._createHelper(a),e.HmacSHA1=n._createHmacHelper(a)}(),function(){var e=i,t=e.lib,r=t.Base,n=t.WordArray,o=e.algo,s=o.SHA1,a=o.HMAC,u=o.PBKDF2=r.extend({cfg:r.extend({keySize:4,hasher:s,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var r=this.cfg,o=a.create(r.hasher,e),i=n.create(),s=n.create([1]),u=i.words,c=s.words,l=r.keySize,p=r.iterations;u.length<l;){var h=o.update(t).finalize(s);o.reset();for(var f=h.words,d=f.length,g=h,y=1;y<p;y++){g=o.finalize(g),o.reset();for(var v=g.words,m=0;m<d;m++)f[m]^=v[m]}i.concat(h),c[0]++}return i.sigBytes=4*l,i}});e.PBKDF2=function(e,t,r){return u.create(r).compute(e,t)}}(),function(e){var t=i,r=t.lib,n=r.Base,o=r.WordArray,s=t.x64={};s.Word=n.extend({init:function(e,t){this.high=e,this.low=t}}),s.WordArray=n.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,r=[],n=0;n<t;n++){var i=e[n];r.push(i.high),r.push(i.low)}return o.create(r,this.sigBytes)},clone:function(){for(var e=n.clone.call(this),t=e.words=this.words.slice(0),r=t.length,o=0;o<r;o++)t[o]=t[o].clone();return e}})}(),function(){var e=i,t=e.lib.Hasher,r=e.x64,n=r.Word,o=r.WordArray,s=e.algo;function a(){return n.create.apply(n,arguments)}var u=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],c=[];!function(){for(var e=0;e<80;e++)c[e]=a()}();var l=s.SHA512=t.extend({_doReset:function(){this._hash=new o.init([new n.init(1779033703,4089235720),new n.init(3144134277,2227873595),new n.init(1013904242,4271175723),new n.init(2773480762,1595750129),new n.init(1359893119,2917565137),new n.init(2600822924,725511199),new n.init(528734635,4215389547),new n.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var r=this._hash.words,n=r[0],o=r[1],i=r[2],s=r[3],a=r[4],l=r[5],p=r[6],h=r[7],f=n.high,d=n.low,g=o.high,y=o.low,v=i.high,m=i.low,w=s.high,b=s.low,I=a.high,E=a.low,S=l.high,P=l.low,R=p.high,_=p.low,A=h.high,O=h.low,C=f,D=d,q=g,k=y,T=v,B=m,N=w,H=b,x=I,L=E,U=S,M=P,W=R,j=_,K=A,F=O,V=0;V<80;V++){var G=c[V];if(V<16)var z=G.high=0|e[t+2*V],J=G.low=0|e[t+2*V+1];else{var Y=c[V-15],X=Y.high,Z=Y.low,Q=(X>>>1|Z<<31)^(X>>>8|Z<<24)^X>>>7,$=(Z>>>1|X<<31)^(Z>>>8|X<<24)^(Z>>>7|X<<25),ee=c[V-2],te=ee.high,re=ee.low,ne=(te>>>19|re<<13)^(te<<3|re>>>29)^te>>>6,oe=(re>>>19|te<<13)^(re<<3|te>>>29)^(re>>>6|te<<26),ie=c[V-7],se=ie.high,ae=ie.low,ue=c[V-16],ce=ue.high,le=ue.low;z=(z=(z=Q+se+((J=$+ae)>>>0<$>>>0?1:0))+ne+((J+=oe)>>>0<oe>>>0?1:0))+ce+((J+=le)>>>0<le>>>0?1:0),G.high=z,G.low=J}var pe,he=x&U^~x&W,fe=L&M^~L&j,de=C&q^C&T^q&T,ge=D&k^D&B^k&B,ye=(C>>>28|D<<4)^(C<<30|D>>>2)^(C<<25|D>>>7),ve=(D>>>28|C<<4)^(D<<30|C>>>2)^(D<<25|C>>>7),me=(x>>>14|L<<18)^(x>>>18|L<<14)^(x<<23|L>>>9),we=(L>>>14|x<<18)^(L>>>18|x<<14)^(L<<23|x>>>9),be=u[V],Ie=be.high,Ee=be.low,Se=K+me+((pe=F+we)>>>0<F>>>0?1:0),Pe=ve+ge;K=W,F=j,W=U,j=M,U=x,M=L,x=N+(Se=(Se=(Se=Se+he+((pe+=fe)>>>0<fe>>>0?1:0))+Ie+((pe+=Ee)>>>0<Ee>>>0?1:0))+z+((pe+=J)>>>0<J>>>0?1:0))+((L=H+pe|0)>>>0<H>>>0?1:0)|0,N=T,H=B,T=q,B=k,q=C,k=D,C=Se+(ye+de+(Pe>>>0<ve>>>0?1:0))+((D=pe+Pe|0)>>>0<pe>>>0?1:0)|0}d=n.low=d+D,n.high=f+C+(d>>>0<D>>>0?1:0),y=o.low=y+k,o.high=g+q+(y>>>0<k>>>0?1:0),m=i.low=m+B,i.high=v+T+(m>>>0<B>>>0?1:0),b=s.low=b+H,s.high=w+N+(b>>>0<H>>>0?1:0),E=a.low=E+L,a.high=I+x+(E>>>0<L>>>0?1:0),P=l.low=P+M,l.high=S+U+(P>>>0<M>>>0?1:0),_=p.low=_+j,p.high=R+W+(_>>>0<j>>>0?1:0),O=h.low=O+F,h.high=A+K+(O>>>0<F>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;return t[n>>>5]|=128<<24-n%32,t[30+(n+128>>>10<<5)]=Math.floor(r/4294967296),t[31+(n+128>>>10<<5)]=r,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=t.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});e.SHA512=t._createHelper(l),e.HmacSHA512=t._createHmacHelper(l)}(),i.lib.Cipher||function(e){var t=i,r=t.lib,n=r.Base,o=r.WordArray,s=r.BufferedBlockAlgorithm,a=t.enc,u=(a.Utf8,a.Base64),c=t.algo.EvpKDF,l=r.Cipher=s.extend({cfg:n.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,r){this.cfg=this.cfg.extend(r),this._xformMode=e,this._key=t,this.reset()},reset:function(){s.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return"string"==typeof e?w:v}return function(t){return{encrypt:function(r,n,o){return e(n).encrypt(t,r,n,o)},decrypt:function(r,n,o){return e(n).decrypt(t,r,n,o)}}}}()}),p=(r.StreamCipher=l.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),t.mode={}),h=r.BlockCipherMode=n.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),f=p.CBC=function(){var t=h.extend();function r(t,r,n){var o=this._iv;if(o){var i=o;this._iv=e}else i=this._prevBlock;for(var s=0;s<n;s++)t[r+s]^=i[s]}return t.Encryptor=t.extend({processBlock:function(e,t){var n=this._cipher,o=n.blockSize;r.call(this,e,t,o),n.encryptBlock(e,t),this._prevBlock=e.slice(t,t+o)}}),t.Decryptor=t.extend({processBlock:function(e,t){var n=this._cipher,o=n.blockSize,i=e.slice(t,t+o);n.decryptBlock(e,t),r.call(this,e,t,o),this._prevBlock=i}}),t}(),d=(t.pad={}).Pkcs7={pad:function(e,t){for(var r=4*t,n=r-e.sigBytes%r,i=n<<24|n<<16|n<<8|n,s=[],a=0;a<n;a+=4)s.push(i);var u=o.create(s,n);e.concat(u)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},g=(r.BlockCipher=l.extend({cfg:l.cfg.extend({mode:f,padding:d}),reset:function(){l.reset.call(this);var e=this.cfg,t=e.iv,r=e.mode;if(this._xformMode==this._ENC_XFORM_MODE)var n=r.createEncryptor;else n=r.createDecryptor,this._minBufferSize=1;this._mode&&this._mode.__creator==n?this._mode.init(this,t&&t.words):(this._mode=n.call(r,this,t&&t.words),this._mode.__creator=n)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){e.pad(this._data,this.blockSize);var t=this._process(!0)}else t=this._process(!0),e.unpad(t);return t},blockSize:4}),r.CipherParams=n.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}})),y=(t.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,r=e.salt;if(r)var n=o.create([1398893684,1701076831]).concat(r).concat(t);else n=t;return n.toString(u)},parse:function(e){var t=u.parse(e),r=t.words;if(1398893684==r[0]&&1701076831==r[1]){var n=o.create(r.slice(2,4));r.splice(0,4),t.sigBytes-=16}return g.create({ciphertext:t,salt:n})}},v=r.SerializableCipher=n.extend({cfg:n.extend({format:y}),encrypt:function(e,t,r,n){n=this.cfg.extend(n);var o=e.createEncryptor(r,n),i=o.finalize(t),s=o.cfg;return g.create({ciphertext:i,key:r,iv:s.iv,algorithm:e,mode:s.mode,padding:s.padding,blockSize:e.blockSize,formatter:n.format})},decrypt:function(e,t,r,n){return n=this.cfg.extend(n),t=this._parse(t,n.format),e.createDecryptor(r,n).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}}),m=(t.kdf={}).OpenSSL={execute:function(e,t,r,n){n||(n=o.random(8));var i=c.create({keySize:t+r}).compute(e,n),s=o.create(i.words.slice(t),4*r);return i.sigBytes=4*t,g.create({key:i,iv:s,salt:n})}},w=r.PasswordBasedCipher=v.extend({cfg:v.cfg.extend({kdf:m}),encrypt:function(e,t,r,n){var o=(n=this.cfg.extend(n)).kdf.execute(r,e.keySize,e.ivSize);n.iv=o.iv;var i=v.encrypt.call(this,e,t,o.key,n);return i.mixIn(o),i},decrypt:function(e,t,r,n){n=this.cfg.extend(n),t=this._parse(t,n.format);var o=n.kdf.execute(r,e.keySize,e.ivSize,t.salt);return n.iv=o.iv,v.decrypt.call(this,e,t,o.key,n)}})}(),function(){var e=i,t=e.lib.BlockCipher,r=e.algo,n=[],o=[],s=[],a=[],u=[],c=[],l=[],p=[],h=[],f=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var r=0,i=0;for(t=0;t<256;t++){var d=i^i<<1^i<<2^i<<3^i<<4;d=d>>>8^255&d^99,n[r]=d,o[d]=r;var g=e[r],y=e[g],v=e[y],m=257*e[d]^16843008*d;s[r]=m<<24|m>>>8,a[r]=m<<16|m>>>16,u[r]=m<<8|m>>>24,c[r]=m,m=16843009*v^65537*y^257*g^16843008*r,l[d]=m<<24|m>>>8,p[d]=m<<16|m>>>16,h[d]=m<<8|m>>>24,f[d]=m,r?(r=g^e[e[e[v^g]]],i^=e[e[i]]):r=i=1}}();var d=[0,1,2,4,8,16,32,64,128,27,54],g=r.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,r=e.sigBytes/4,o=4*((this._nRounds=r+6)+1),i=this._keySchedule=[],s=0;s<o;s++)if(s<r)i[s]=t[s];else{var a=i[s-1];s%r?r>6&&s%r==4&&(a=n[a>>>24]<<24|n[a>>>16&255]<<16|n[a>>>8&255]<<8|n[255&a]):(a=n[(a=a<<8|a>>>24)>>>24]<<24|n[a>>>16&255]<<16|n[a>>>8&255]<<8|n[255&a],a^=d[s/r|0]<<24),i[s]=i[s-r]^a}for(var u=this._invKeySchedule=[],c=0;c<o;c++)s=o-c,a=c%4?i[s]:i[s-4],u[c]=c<4||s<=4?a:l[n[a>>>24]]^p[n[a>>>16&255]]^h[n[a>>>8&255]]^f[n[255&a]]}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,s,a,u,c,n)},decryptBlock:function(e,t){var r=e[t+1];e[t+1]=e[t+3],e[t+3]=r,this._doCryptBlock(e,t,this._invKeySchedule,l,p,h,f,o),r=e[t+1],e[t+1]=e[t+3],e[t+3]=r},_doCryptBlock:function(e,t,r,n,o,i,s,a){for(var u=this._nRounds,c=e[t]^r[0],l=e[t+1]^r[1],p=e[t+2]^r[2],h=e[t+3]^r[3],f=4,d=1;d<u;d++){var g=n[c>>>24]^o[l>>>16&255]^i[p>>>8&255]^s[255&h]^r[f++],y=n[l>>>24]^o[p>>>16&255]^i[h>>>8&255]^s[255&c]^r[f++],v=n[p>>>24]^o[h>>>16&255]^i[c>>>8&255]^s[255&l]^r[f++],m=n[h>>>24]^o[c>>>16&255]^i[l>>>8&255]^s[255&p]^r[f++];c=g,l=y,p=v,h=m}g=(a[c>>>24]<<24|a[l>>>16&255]<<16|a[p>>>8&255]<<8|a[255&h])^r[f++],y=(a[l>>>24]<<24|a[p>>>16&255]<<16|a[h>>>8&255]<<8|a[255&c])^r[f++],v=(a[p>>>24]<<24|a[h>>>16&255]<<16|a[c>>>8&255]<<8|a[255&l])^r[f++],m=(a[h>>>24]<<24|a[c>>>16&255]<<16|a[l>>>8&255]<<8|a[255&p])^r[f++],e[t]=g,e[t+1]=y,e[t+2]=v,e[t+3]=m},keySize:8});e.AES=t._createHelper(g)}(),i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSEncrypt=void 0;var n=r(4),o=r(5),i=r(6),s=r(7),a=r(0),u=r(12);function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.ASN1.prototype.getHexStringValue=function(){var e=this.toHexString(),t=2*this.header,r=2*this.length;return e.substr(t,r)},s.RSAKey.prototype.parseKey=function(e){try{var t=0,r=0,s=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(e)?o.Hex.decode(e):i.Base64.unarmor(e),u=n.ASN1.decode(s);if(3===u.sub.length&&(u=u.sub[2].sub[0]),9===u.sub.length){t=u.sub[1].getHexStringValue(),this.n=(0,a.parseBigInt)(t,16),r=u.sub[2].getHexStringValue(),this.e=parseInt(r,16);var c=u.sub[3].getHexStringValue();this.d=(0,a.parseBigInt)(c,16);var l=u.sub[4].getHexStringValue();this.p=(0,a.parseBigInt)(l,16);var p=u.sub[5].getHexStringValue();this.q=(0,a.parseBigInt)(p,16);var h=u.sub[6].getHexStringValue();this.dmp1=(0,a.parseBigInt)(h,16);var f=u.sub[7].getHexStringValue();this.dmq1=(0,a.parseBigInt)(f,16);var d=u.sub[8].getHexStringValue();this.coeff=(0,a.parseBigInt)(d,16)}else{if(2!==u.sub.length)return!1;var g=u.sub[1].sub[0];t=g.sub[0].getHexStringValue(),this.n=(0,a.parseBigInt)(t,16),r=g.sub[1].getHexStringValue(),this.e=parseInt(r,16)}return!0}catch(e){return!1}},s.RSAKey.prototype.hasPrivateKeyProperty=function(e){return(e=e||{}).hasOwnProperty("n")&&e.hasOwnProperty("e")&&e.hasOwnProperty("d")&&e.hasOwnProperty("p")&&e.hasOwnProperty("q")&&e.hasOwnProperty("dmp1")&&e.hasOwnProperty("dmq1")&&e.hasOwnProperty("coeff")},s.RSAKey.prototype.hasPublicKeyProperty=function(e){return(e=e||{}).hasOwnProperty("n")&&e.hasOwnProperty("e")},s.RSAKey.prototype.parsePropertiesFrom=function(e){this.n=e.n,this.e=e.e,e.hasOwnProperty("d")&&(this.d=e.d,this.p=e.p,this.q=e.q,this.dmp1=e.dmp1,this.dmq1=e.dmq1,this.coeff=e.coeff)};var l=function(e){function t(e){c(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e&&("string"==typeof e?r.parseKey(e):(r.hasPrivateKeyProperty(e)||r.hasPublicKeyProperty(e))&&r.parsePropertiesFrom(e)),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.RSAKey),t}(),p=t.JSEncrypt=function e(t){c(this,e),t=t||{},this.default_key_size=parseInt(t.default_key_size)||1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null};p.prototype.setKey=function(e){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new l(e)},p.prototype.setPublicKey=function(e){this.setKey(e)},p.prototype.encrypt=function(e){try{return(0,u.hex2b64)(this.getKey().encrypt(e))}catch(e){return!1}},p.prototype.getKey=function(e){if(!this.key){if(this.key=new l,e&&"[object Function]"==={}.toString.call(e))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,e);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key}},function(e,t,r){"use strict";r.r(t),r.d(t,"Encryption",function(){return i});var n=r(1),o=r(2);class i{constructor(){this.cryptoJs=n,this.jsEncrypt=o}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(e,t){var r=document.createElement(e);return r.className=t,r},a=function(e){return document.createTextNode(e)},u=function(){function e(t,r){i(this,e),t instanceof e?(this.enc=t.enc,this.pos=t.pos):(this.enc=t,this.pos=r)}return o(e,null,[{key:"hexDigits",get:function(){return"0123456789ABCDEF"}},{key:"reTime",get:function(){return/^((?:1[89]|2\d)?\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/}}]),o(e,[{key:"get",value:function(e){if(void 0===e&&(e=this.pos++),e>=this.enc.length)throw"Requesting byte offset "+e+" on a stream of length "+this.enc.length;return this.enc[e]}},{key:"hexByte",value:function(t){return e.hexDigits.charAt(t>>4&15)+e.hexDigits.charAt(15&t)}},{key:"hexDump",value:function(e,t,r){for(var n="",o=e;o<t;++o)if(n+=this.hexByte(this.get(o)),!0!==r)switch(15&o){case 7:n+="  ";break;case 15:n+="\n";break;default:n+=" "}return n}},{key:"parseStringISO",value:function(e,t){for(var r="",n=e;n<t;++n)r+=String.fromCharCode(this.get(n));return r}},{key:"parseStringUTF",value:function(e,t){for(var r="",n=e;n<t;){var o=this.get(n++);r+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(n++)):String.fromCharCode((15&o)<<12|(63&this.get(n++))<<6|63&this.get(n++))}return r}},{key:"parseStringBMP",value:function(e,t){for(var r="",n=e;n<t;n+=2){var o=this.get(n),i=this.get(n+1);r+=String.fromCharCode((o<<8)+i)}return r}},{key:"parseTime",value:function(t,r){var n=this.parseStringISO(t,r),o=e.reTime.exec(n);return o?(n=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(n+=":"+o[5],o[6]&&(n+=":"+o[6],o[7]&&(n+="."+o[7]))),o[8]&&(n+=" UTC","Z"!=o[8]&&(n+=o[8],o[9]&&(n+=":"+o[9]))),n):"Unrecognized time: "+n}},{key:"parseInteger",value:function(e,t){var r=t-e;if(r>4){r<<=3;var n=this.get(e);if(0===n)r-=8;else for(;n<128;)n<<=1,--r;return"("+r+" bit)"}for(var o=0,i=e;i<t;++i)o=o<<8|this.get(i);return o}},{key:"parseBitString",value:function(e,t){var r=this.get(e),n=(t-e-1<<3)-r,o="("+n+" bit)";if(n<=20){var i=r;o+=" ";for(var s=t-1;s>e;--s){for(var a=this.get(s),u=i;u<8;++u)o+=a>>u&1?"1":"0";i=0}}return o}},{key:"parseOctetString",value:function(e,t){var r=t-e,n="("+r+" byte) ";r>100&&(t=e+100);for(var o=e;o<t;++o)n+=this.hexByte(this.get(o));return r>100&&(n+="…"),n}},{key:"parseOID",value:function(e,t){for(var r="",n=0,o=0,i=e;i<t;++i){var s=this.get(i);if(n=n<<7|127&s,o+=7,!(128&s)){if(""===r){var a=n<80?n<40?0:1:2;r=a+"."+(n-40*a)}else r+="."+(o>=31?"bigint":n);n=o=0}}return r}}]),e}(),c=t.ASN1=function(){function e(t,r,n,o,s){i(this,e),this.stream=t,this.header=r,this.length=n,this.tag=o,this.sub=s}return o(e,null,[{key:"reSeemsASCII",get:function(){return/^[ -~]+$/}}]),o(e,[{key:"typeName",value:function(){if(void 0===this.tag)return"unknown";var e=this.tag>>6,t=(this.tag,31&this.tag);switch(e){case 0:switch(t){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString";default:return"Universal_"+t.toString(16)}case 1:return"Application_"+t.toString(16);case 2:return"["+t+"]";case 3:return"Private_"+t.toString(16)}}},{key:"content",value:function(){if(void 0===this.tag)return null;var t=this.tag>>6,r=31&this.tag,n=this.posContent(),o=Math.abs(this.length);if(0!==t){if(null!==this.sub)return"("+this.sub.length+" elem)";var i=this.stream.parseStringISO(n,n+Math.min(o,100));return e.reSeemsASCII.test(i)?i.substring(0,200)+(i.length>200?"…":""):this.stream.parseOctetString(n,n+o)}switch(r){case 1:return 0===this.stream.get(n)?"false":"true";case 2:return this.stream.parseInteger(n,n+o);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(n,n+o);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(n,n+o);case 6:return this.stream.parseOID(n,n+o);case 16:case 17:return"("+this.sub.length+" elem)";case 12:return this.stream.parseStringUTF(n,n+o);case 18:case 19:case 20:case 21:case 22:case 26:return this.stream.parseStringISO(n,n+o);case 30:return this.stream.parseStringBMP(n,n+o);case 23:case 24:return this.stream.parseTime(n,n+o)}return null}},{key:"toString",value:function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"}},{key:"print",value:function(e){if(void 0===e&&(e=""),document.writeln(e+this),null!==this.sub){e+="  ";for(var t=0,r=this.sub.length;t<r;++t)this.sub[t].print(e)}}},{key:"toPrettyString",value:function(e){void 0===e&&(e="");var t=e+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(t+="+"),t+=this.length,32&this.tag?t+=" (constructed)":3!=this.tag&&4!=this.tag||null===this.sub||(t+=" (encapsulates)"),t+="\n",null!==this.sub){e+="  ";for(var r=0,n=this.sub.length;r<n;++r)t+=this.sub[r].toPrettyString(e)}return t}},{key:"toDOM",value:function(){var e=s("div","node");e.asn1=this;var t=s("div","head"),r=this.typeName().replace(/_/g," ");t.innerHTML=r;var o=this.content();if(null!==o){o=String(o).replace(/</g,"&lt;");var i=s("span","preview");i.appendChild(a(o)),t.appendChild(i)}e.appendChild(t),this.node=e,this.head=t;var u=s("div","value");if(r="Offset: "+this.stream.pos+"<br/>",r+="Length: "+this.header+"+",this.length>=0?r+=this.length:r+=-this.length+" (undefined)",32&this.tag?r+="<br/>(constructed)":3!=this.tag&&4!=this.tag||null===this.sub||(r+="<br/>(encapsulates)"),null!==o&&(r+="<br/>Value:<br/><b>"+o+"</b>","object"===("undefined"==typeof oids?"undefined":n(oids))&&6==this.tag)){var c=oids[o];c&&(c.d&&(r+="<br/>"+c.d),c.c&&(r+="<br/>"+c.c),c.w&&(r+="<br/>(warning!)"))}u.innerHTML=r,e.appendChild(u);var l=s("div","sub");if(null!==this.sub)for(var p=0,h=this.sub.length;p<h;++p)l.appendChild(this.sub[p].toDOM());return e.appendChild(l),t.onclick=function(){e.className="node collapsed"==e.className?"node":"node collapsed"},e}},{key:"posStart",value:function(){return this.stream.pos}},{key:"posContent",value:function(){return this.stream.pos+this.header}},{key:"posEnd",value:function(){return this.stream.pos+this.header+Math.abs(this.length)}},{key:"fakeHover",value:function(e){this.node.className+=" hover",e&&(this.head.className+=" hover")}},{key:"fakeOut",value:function(e){var t=/ ?hover/;this.node.className=this.node.className.replace(t,""),e&&(this.head.className=this.head.className.replace(t,""))}},{key:"toHexDOM_sub",value:function(e,t,r,n,o){if(!(n>=o)){var i=s("span",t);i.appendChild(a(r.hexDump(n,o))),e.appendChild(i)}}},{key:"toHexDOM",value:function(e){var t=s("span","hex");if(void 0===e&&(e=t),this.head.hexNode=t,this.head.onmouseover=function(){this.hexNode.className="hexCurrent"},this.head.onmouseout=function(){this.hexNode.className="hex"},t.asn1=this,t.onmouseover=function(){var t=!e.selected;t&&(e.selected=this.asn1,this.className="hexCurrent"),this.asn1.fakeHover(t)},t.onmouseout=function(){var t=e.selected==this.asn1;this.asn1.fakeOut(t),t&&(e.selected=null,this.className="hex")},this.toHexDOM_sub(t,"tag",this.stream,this.posStart(),this.posStart()+1),this.toHexDOM_sub(t,this.length>=0?"dlen":"ulen",this.stream,this.posStart()+1,this.posContent()),null===this.sub)t.appendChild(a(this.stream.hexDump(this.posContent(),this.posEnd())));else if(this.sub.length>0){var r=this.sub[0],n=this.sub[this.sub.length-1];this.toHexDOM_sub(t,"intro",this.stream,this.posContent(),r.posStart());for(var o=0,i=this.sub.length;o<i;++o)t.appendChild(this.sub[o].toHexDOM(e));this.toHexDOM_sub(t,"outro",this.stream,n.posEnd(),this.posEnd())}return t}},{key:"toHexString",value:function(e){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)}}]),e}();c.decodeLength=function(e){var t=e.get(),r=127&t;if(r==t)return r;if(r>3)throw"Length over 24 bits not supported at position "+(e.pos-1);if(0===r)return-1;t=0;for(var n=0;n<r;++n)t=t<<8|e.get();return t},c.hasContent=function(e,t,r){if(32&e)return!0;if(e<3||e>4)return!1;var n=new u(r);if(3==e&&n.get(),n.get()>>6&1)return!1;try{var o=c.decodeLength(n);return n.pos-r.pos+o==t}catch(e){return!1}},c.decode=function(e){e instanceof u||(e=new u(e,0));var t=new u(e),r=e.get(),n=c.decodeLength(e),o=e.pos-t.pos,i=null;if(c.hasContent(r,n,e)){var s=e.pos;if(3==r&&e.get(),i=[],n>=0){for(var a=s+n;e.pos<a;)i[i.length]=c.decode(e);if(e.pos!=a)throw"Content size is not correct for container starting at offset "+s}else try{for(;;){var l=c.decode(e);if(0===l.tag)break;i[i.length]=l}n=s-e.pos}catch(e){throw"Exception while decoding undefined length content: "+e}}else e.pos+=n;return new c(t,o,n,r,i)},c.test=function(){for(var e=[{value:[39],expected:39},{value:[129,201],expected:201},{value:[131,254,220,186],expected:16702650}],t=0,r=e.length;t<r;++t){var n=new u(e[t].value,0),o=c.decodeLength(n);o!=e[t].expected&&document.write("In test["+t+"] expected "+e[t].expected+" got "+o+"\n")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.Hex={},o=void 0;n.decode=function(e){var t;if(void 0===o){var r="0123456789ABCDEF",n=" \f\n\r\t \u2028\u2029";for(o=[],t=0;t<16;++t)o[r.charAt(t)]=t;for(r=r.toLowerCase(),t=10;t<16;++t)o[r.charAt(t)]=t;for(t=0;t<n.length;++t)o[n.charAt(t)]=-1}var i=[],s=0,a=0;for(t=0;t<e.length;++t){var u=e.charAt(t);if("="==u)break;if(-1!=(u=o[u])){if(void 0===u)throw"Illegal character at offset "+t;s|=u,++a>=2?(i[i.length]=s,s=0,a=0):s<<=4}}if(a)throw"Hex encoding incomplete: 4 bits missing";return i}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.Base64={},o=void 0;n.decode=function(e){var t;if(void 0===o){var r="= \f\n\r\t \u2028\u2029";for(o=[],t=0;t<64;++t)o["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t)]=t;for(t=0;t<r.length;++t)o[r.charAt(t)]=-1}var n=[],i=0,s=0;for(t=0;t<e.length;++t){var a=e.charAt(t);if("="==a)break;if(-1!=(a=o[a])){if(void 0===a)throw"Illegal character at offset "+t;i|=a,++s>=4?(n[n.length]=i>>16,n[n.length]=i>>8&255,n[n.length]=255&i,i=0,s=0):i<<=6}}switch(s){case 1:throw"Base64 encoding incomplete: at least 2 bits missing";case 2:n[n.length]=i>>10;break;case 3:n[n.length]=i>>16,n[n.length]=i>>8&255}return n},n.re=/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,n.unarmor=function(e){var t=n.re.exec(e);if(t)if(t[1])e=t[1];else{if(!t[2])throw"RegExp out of sync";e=t[2]}return n.decode(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RSAKey=void 0;var n=r(0);Object.defineProperty(t,"RSAKey",{enumerable:!0,get:function(){return n.RSAKey}})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BigInteger=void 0;var n=r(9);Object.defineProperty(t,"BigInteger",{enumerable:!0,get:function(){return n.BigInteger}})},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.nbi=i,t.int2char=l,t.intAt=p,t.nbv=h,t.nbits=f;var o=t.BigInteger=function e(t,r,o){n(this,e),null!=t&&("number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))};function i(){return new o(null)}o.prototype.am=function(e,t,r,n,o,i){for(var s=16383&t,a=t>>14;--i>=0;){var u=16383&this[e],c=this[e++]>>14,l=a*u+c*s;o=((u=s*u+((16383&l)<<14)+r[n]+o)>>28)+(l>>14)+a*c,r[n++]=268435455&u}return o},o.prototype.DB=28,o.prototype.DM=268435455,o.prototype.DV=1<<28,o.prototype.FV=Math.pow(2,52),o.prototype.F1=24,o.prototype.F2=4;var s,a,u="0123456789abcdefghijklmnopqrstuvwxyz",c=[];for(s="0".charCodeAt(0),a=0;a<=9;++a)c[s++]=a;for(s="a".charCodeAt(0),a=10;a<36;++a)c[s++]=a;for(s="A".charCodeAt(0),a=10;a<36;++a)c[s++]=a;function l(e){return u.charAt(e)}function p(e,t){var r=c[e.charCodeAt(t)];return null==r?-1:r}function h(e){var t=i();return t.fromInt(e),t}function f(e){var t,r=1;return 0!=(t=e>>>16)&&(e=t,r+=16),0!=(t=e>>8)&&(e=t,r+=8),0!=(t=e>>4)&&(e=t,r+=4),0!=(t=e>>2)&&(e=t,r+=2),0!=(t=e>>1)&&(e=t,r+=1),r}var d=t.Classic=function e(t){n(this,e),this.m=t};d.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},d.prototype.revert=function(e){return e},d.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},d.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},d.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var g=t.Montgomery=function e(t){n(this,e),this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t};g.prototype.convert=function(e){var t=i();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(o.ZERO)>0&&this.m.subTo(t,t),t},g.prototype.revert=function(e){var t=i();return e.copyTo(t),this.reduce(t),t},g.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var r=32767&e[t],n=r*this.mpl+((r*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[r=t+this.m.t]+=this.m.am(0,n,e,t,0,this.m.t);e[r]>=e.DV;)e[r]-=e.DV,e[++r]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},g.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},g.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},o.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},o.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},o.prototype.fromString=function(e,t){var r;if(16==t)r=4;else if(8==t)r=3;else if(256==t)r=8;else if(2==t)r=1;else if(32==t)r=5;else{if(4!=t)return void this.fromRadix(e,t);r=2}this.t=0,this.s=0;for(var n=e.length,i=!1,s=0;--n>=0;){var a=8==r?255&e[n]:p(e,n);a<0?"-"==e.charAt(n)&&(i=!0):(i=!1,0==s?this[this.t++]=a:s+r>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=r)>=this.DB&&(s-=this.DB))}8==r&&0!=(128&e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),i&&o.ZERO.subTo(this,this)},o.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},o.prototype.dlShiftTo=function(e,t){var r;for(r=this.t-1;r>=0;--r)t[r+e]=this[r];for(r=e-1;r>=0;--r)t[r]=0;t.t=this.t+e,t.s=this.s},o.prototype.drShiftTo=function(e,t){for(var r=e;r<this.t;++r)t[r-e]=this[r];t.t=Math.max(this.t-e,0),t.s=this.s},o.prototype.lShiftTo=function(e,t){var r,n=e%this.DB,o=this.DB-n,i=(1<<o)-1,s=Math.floor(e/this.DB),a=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)t[r+s+1]=this[r]>>o|a,a=(this[r]&i)<<n;for(r=s-1;r>=0;--r)t[r]=0;t[s]=a,t.t=this.t+s+1,t.s=this.s,t.clamp()},o.prototype.rShiftTo=function(e,t){t.s=this.s;var r=Math.floor(e/this.DB);if(r>=this.t)t.t=0;else{var n=e%this.DB,o=this.DB-n,i=(1<<n)-1;t[0]=this[r]>>n;for(var s=r+1;s<this.t;++s)t[s-r-1]|=(this[s]&i)<<o,t[s-r]=this[s]>>n;n>0&&(t[this.t-r-1]|=(this.s&i)<<o),t.t=this.t-r,t.clamp()}},o.prototype.subTo=function(e,t){for(var r=0,n=0,o=Math.min(e.t,this.t);r<o;)n+=this[r]-e[r],t[r++]=n&this.DM,n>>=this.DB;if(e.t<this.t){for(n-=e.s;r<this.t;)n+=this[r],t[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<e.t;)n-=e[r],t[r++]=n&this.DM,n>>=this.DB;n-=e.s}t.s=n<0?-1:0,n<-1?t[r++]=this.DV+n:n>0&&(t[r++]=n),t.t=r,t.clamp()},o.prototype.multiplyTo=function(e,t){var r=this.abs(),n=e.abs(),i=r.t;for(t.t=i+n.t;--i>=0;)t[i]=0;for(i=0;i<n.t;++i)t[i+r.t]=r.am(0,n[i],t,i,0,r.t);t.s=0,t.clamp(),this.s!=e.s&&o.ZERO.subTo(t,t)},o.prototype.squareTo=function(e){for(var t=this.abs(),r=e.t=2*t.t;--r>=0;)e[r]=0;for(r=0;r<t.t-1;++r){var n=t.am(r,t[r],e,2*r,0,1);(e[r+t.t]+=t.am(r+1,2*t[r],e,2*r+1,n,t.t-r-1))>=t.DV&&(e[r+t.t]-=t.DV,e[r+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(r,t[r],e,2*r,0,1)),e.s=0,e.clamp()},o.prototype.divRemTo=function(e,t,r){var n=e.abs();if(!(n.t<=0)){var s=this.abs();if(s.t<n.t)return null!=t&&t.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=i());var a=i(),u=this.s,c=e.s,l=this.DB-f(n[n.t-1]);l>0?(n.lShiftTo(l,a),s.lShiftTo(l,r)):(n.copyTo(a),s.copyTo(r));var p=a.t,h=a[p-1];if(0!=h){var d=h*(1<<this.F1)+(p>1?a[p-2]>>this.F2:0),g=this.FV/d,y=(1<<this.F1)/d,v=1<<this.F2,m=r.t,w=m-p,b=null==t?i():t;for(a.dlShiftTo(w,b),r.compareTo(b)>=0&&(r[r.t++]=1,r.subTo(b,r)),o.ONE.dlShiftTo(p,b),b.subTo(a,a);a.t<p;)a[a.t++]=0;for(;--w>=0;){var I=r[--m]==h?this.DM:Math.floor(r[m]*g+(r[m-1]+v)*y);if((r[m]+=a.am(0,I,r,w,0,p))<I)for(a.dlShiftTo(w,b),r.subTo(b,r);r[m]<--I;)r.subTo(b,r)}null!=t&&(r.drShiftTo(p,t),u!=c&&o.ZERO.subTo(t,t)),r.t=p,r.clamp(),l>0&&r.rShiftTo(l,r),u<0&&o.ZERO.subTo(r,r)}}},o.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},o.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},o.prototype.exp=function(e,t){if(e>4294967295||e<1)return o.ONE;var r=i(),n=i(),s=t.convert(this),a=f(e)-1;for(s.copyTo(r);--a>=0;)if(t.sqrTo(r,n),(e&1<<a)>0)t.mulTo(n,s,r);else{var u=r;r=n,n=u}return t.revert(r)},o.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var r,n=(1<<t)-1,o=!1,i="",s=this.t,a=this.DB-s*this.DB%t;if(s-- >0)for(a<this.DB&&(r=this[s]>>a)>0&&(o=!0,i=l(r));s>=0;)a<t?(r=(this[s]&(1<<a)-1)<<t-a,r|=this[--s]>>(a+=this.DB-t)):(r=this[s]>>(a-=t)&n,a<=0&&(a+=this.DB,--s)),r>0&&(o=!0),o&&(i+=l(r));return o?i:"0"},o.prototype.negate=function(){var e=i();return o.ZERO.subTo(this,e),e},o.prototype.abs=function(){return this.s<0?this.negate():this},o.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var r=this.t;if(0!=(t=r-e.t))return this.s<0?-t:t;for(;--r>=0;)if(0!=(t=this[r]-e[r]))return t;return 0},o.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+f(this[this.t-1]^this.s&this.DM)},o.prototype.mod=function(e){var t=i();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(o.ZERO)>0&&e.subTo(t,t),t},o.prototype.modPowInt=function(e,t){var r;return r=e<256||t.isEven()?new d(t):new g(t),this.exp(e,r)},o.ZERO=h(0),o.ONE=h(1)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SecureRandom=void 0;var n,o,i,s=r(11);function a(){if(null==n){for(n=(0,s.prng_newstate)();i<s.rng_psize;){var e=Math.floor(65536*Math.random());o[i++]=255&e}for(n.init(o),i=0;i<o.length;++i)o[i]=0;i=0}return n.next()}null==o&&(o=new Array,i=0),(t.SecureRandom=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}).prototype.nextBytes=function(e){var t;for(t=0;t<e.length;++t)e[t]=a()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prng_newstate=function(){return new n};var n=t.Arcfour=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.i=0,this.j=0,this.S=[]};n.prototype.init=function(e){var t,r,n;for(t=0;t<256;++t)this.S[t]=t;for(r=0,t=0;t<256;++t)r=r+this.S[t]+e[t%e.length]&255,n=this.S[t],this.S[t]=this.S[r],this.S[r]=n;this.i=0,this.j=0},n.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]},t.rng_psize=256},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hex2b64=function(e){var t,r,i="";for(t=0;t+3<=e.length;t+=3)r=parseInt(e.substring(t,t+3),16),i+=n.charAt(r>>6)+n.charAt(63&r);for(t+1==e.length?(r=parseInt(e.substring(t,t+1),16),i+=n.charAt(r<<2)):t+2==e.length&&(r=parseInt(e.substring(t,t+2),16),i+=n.charAt(r>>2)+n.charAt((3&r)<<4));(3&i.length)>0;)i+=o;return i};var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o="="}]))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.encryption=e}return e.prototype.getRsaEncrypt=function(e,t){var r=new this.encryption.JSEncrypt;return r.setPublicKey(t),this.encrypted=r.encrypt(e),this.encrypted},e.prototype.getRSADecrypt=function(e,t){var r=new this.encryption.JSEncrypt;return r.setPrivateKey(t),this.unencrypted=r.decrypt(e),this.unencrypted},e}();t.RSAEncryption=n},function(e,t){var r="/sw.js";Object.defineProperty(t,"__esModule",{value:!0}),t.default={register:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return!!navigator.serviceWorker&&navigator.serviceWorker.register(r,e)}},e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(34),o=function(){function e(e){this.env=e.env,this.production=e.production,this.envProps=new n.EnvProps(e.envProps)}return e.prototype.getEnvType=function(){return this.env},e.prototype.getProduction=function(){return this.production},e.prototype.getEnvProps=function(){return this.envProps},e}();t.Environment=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.orgId=e.orgId,this.appId=e.appId,this.appVersion=e.appVersion,this.baseUrl=e.baseUrl,this.platform=e.platform,this.secureKey=e.secureKey,this.securityVersion=e.securityVersion,this.lat=e.lat,this.lon=e.lon}return e.prototype.getOrgId=function(){return this.orgId},e.prototype.getAppId=function(){return this.appId},e.prototype.getAppVersion=function(){return this.appVersion},e.prototype.getBaseUrl=function(){return this.baseUrl},e.prototype.getPlatform=function(){return this.platform},e.prototype.getSecureKey=function(){return this.secureKey},e.prototype.getSecurityVersion=function(){return this.securityVersion},e.prototype.getLongitude=function(){return this.lon},e.prototype.getLatitude=function(){return this.lat},e}();t.EnvProps=n},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(4),s=r(6),a=function(){function e(){}return e.prototype.doPostCall=function(e){var t=this,r=this.getResponseHeaders(e.header,e.body);return i.Logger.getInstance().log("Calling Server==>",r,e.header),fetch(e.url,{method:"POST",body:this.getNetworkBody(e.body),headers:r}).then(function(e){return n(t,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return i.Logger.getInstance().log("Response recieved ==>",e),t={},[4,e.json()];case 1:return[2,(t.body=r.sent(),t.headers=e.headers,t.responseCode=e.status,t.status=e.ok,t)]}})})}).catch(function(e){throw s.UserResponse.mapAPIResponse(!1,{status:"",message:"Connection Error! We are unable to reach to the server"},"PW003")})},e.prototype.getNetworkBody=function(e){return e instanceof FormData?e:JSON.stringify(e)},e.prototype.getResponseHeaders=function(e,t){return t instanceof FormData?e:Object.assign({"Content-Type":"application/json"},e)},e}();t.FetchWrapper=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.doPostCall=function(e){return new Promise(function(){})},e}();t.AxiosWrapper=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.doPostCall=function(e){return new Promise(function(){})},e}();t.XmlHttpWrapper=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.getHexString=function(e){for(var t=[],r=0;r<e.length;r++)t.push(e.charCodeAt(r));return this.toHexString(t)},e.prototype.toHexString=function(e){return Array.from(e,this.byte).join("")},e.prototype.byte=function(e){return("0"+(255&e).toString(16)).slice(-2)},e}();t.HexUtility=n},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),s=r(9),a=r(1),u=r(10),c=r(2),l=r(3),p=r(11),h=r(7),f=function(){function e(){this.security=new i.Security,this.platwareHeaderandBody=new s.PlatwareRequestModel,this.requestUtility=new a.RequestUtility,this.dateParsing=new u.DateParsing}return e.prototype.getRequestService=function(e){return n(this,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=r.sent(),this.requestProperty=new p.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setServiceHeaders(this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getEnvProp)];case 2:return r.sent(),[4,this.setServiceBody(this.requestProperty.getCurrentDate,this.requestProperty.getWindowNavigator,e,this.requestProperty.getFingerPrint,this.requestProperty.getEnvProp)];case 3:return r.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setServiceHeaders=function(e,t,r,i){return n(this,void 0,void 0,function(){var n,s,a,u,p;return o(this,function(o){switch(o.label){case 0:return n="",[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.JWTTOKEN))];case 1:return s=o.sent(),[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.AUTHJWTTOKEN))];case 2:if(a=o.sent())n=this.security.aesEncryption.getDecryption(JSON.parse(a),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey());else if(s)try{n=this.security.aesEncryption.getDecryption(JSON.parse(s),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())}catch(e){throw e}return this.platwareHeaderandBody.pwRequest.PWHeader.authorization=n,[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.LOGINID))];case 3:return u=o.sent(),p=u?JSON.parse(u):"--",this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(p,t,e,i),this.setHeaderKeys(r,t,i,"ER_ER"),[2]}})})},e.prototype.setServiceBody=function(e,t,r,i,s){return n(this,void 0,void 0,function(){var n,a,u;return o(this,function(o){switch(o.label){case 0:return this.setInterface(e,t,i,s),this.platwareHeaderandBody.pwRequest.PWBody.services=r.reqData.services,[4,this.requestUtility.generateTxnKey(e,s)];case 1:return n=o.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=n.b,a=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),n.t),u={request:a},this.platwareHeaderandBody.pwRequest.temp=u,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(u),n.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.txnkey=n.t.toString(),[2]}})})},e.prototype.setHeaderKeys=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=n},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return this.platwareHeaderandBody.pwRequest},e}();t.GatewayService=f},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(9),s=r(0),a=r(10),u=r(1),c=r(11),l=r(2),p=r(22),h=function(){function e(){this.security=new s.Security,this.platwareHeaderandBody=new i.PlatwareRequestModel,this.requestUtility=new u.RequestUtility,this.dateParsing=new a.DateParsing,this.apiType=new p.ApiType}return e.prototype.getAuthRequest=function(e){return n(this,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=r.sent(),this.requestProperty=new c.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setAuthHeaders(this.requestProperty.getNounce,e,this.requestProperty.getServiceName,this.requestProperty.getFingerPrint,this.requestProperty.getCurrentNounce,this.requestProperty.getCurrentDate,this.requestProperty.getEnvProp)];case 2:return r.sent(),[4,this.setAuthBody(this.requestProperty.getFingerPrint,this.requestProperty.getWindowNavigator,e,this.requestProperty.getCurrentDate,this.requestProperty.getEnvProp)];case 3:return r.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setAuthHeaders=function(e,t,r,i,s,a,u){return n(this,void 0,void 0,function(){var n,c,p,h,f,d,g;return o(this,function(o){switch(o.label){case 0:return n=t.reqData.services.AUTH_VAHANA[0].id?t.reqData.services.AUTH_VAHANA[0].id:"--",c=s.toString()+u.secureKey,p=c.substring(0,32),h=u.orgId+"~"+u.appId+"~"+n+"~"+i+":user:"+s,f=this.security.aesEncryption.getEncryption(h,p),this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(n,i,a,u),this.platwareHeaderandBody.pwRequest.PWHeader.authorization="Basic "+f,this.platwareHeaderandBody.pwRequest.PWHeader.nounce=e,this.setHeaderKeys(r,i,u,"ER_ER"),[4,l.Storage.getInstance().getItemValue(this.requestUtility.makeKey("forceLogin"))];case 1:return d=o.sent(),"Y"===(g=d||"")&&(this.platwareHeaderandBody.pwRequest.PWHeader.isforcelogin=g),this.platwareHeaderandBody.pwRequest.loginId=n,[2]}})})},e.prototype.setAuthBody=function(e,t,r,i,s){return n(this,void 0,void 0,function(){var n,a,u;return o(this,function(o){switch(o.label){case 0:return this.setInterface(i,t,e,s),this.platwareHeaderandBody.pwRequest.PWBody.services=r.reqData.services,[4,this.requestUtility.generateTxnKey(i,s)];case 1:return n=o.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=n.b,a=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),n.t),u={request:a},this.platwareHeaderandBody.pwRequest.temp=u,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(u),n.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.txnkey=n.t.toString(),[2]}})})},e.prototype.setHeaderKeys=function(e,t,r,i){return n(this,void 0,void 0,function(){return o(this,function(n){return this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=i,[2]})})},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return this.platwareHeaderandBody.pwRequest},e}();t.AuthService=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),o=function(){function e(){this.data={envProps:{},body:{},header:{},reqData:{interfaces:{},services:{}},url:""}}return e.prototype.setapiType=function(e){this.apiType=e},e.prototype.getapiType=function(){return this.apiType},e.prototype.mapToPlatwareRequest=function(e,t){return this.data.envProps=n.EnvironmentStore.getInstance().getEnvironment(),this.data.header=t,this.data.body=e,this.setServiceKeys(),this.setDataUrl(),this.data},e.prototype.setDataUrl=function(){this.data.envProps.hasOwnProperty("isAuth")?this.data.url=this.setAuthUrl(this.data.body):this.data.url=this.setUrl(this.data.body)},e.prototype.setServiceKeys=function(){for(var e in this.data.body)this.data.reqData.services[e]=this.data.body[e]},e.prototype.setUrl=function(e){for(var t in e)return"LOGOUT"===t?(this.data.url=this.getUrl("logout"),this.data.url):"AUTH_VAHANA"===t||"AUTH"===t?(this.data.url=this.getUrl("auth"),this.setapiType(t),this.data.url):(this.data.url=this.getUrl(""),this.data.url)},e.prototype.getUrl=function(e){switch(e){case"auth":return"/register";case"logout":return"/logout";default:return"/gateway"}},e.prototype.setAuthUrl=function(e){for(var t in e)return this.data.url=this.getUrl("auth"),this.setapiType(t),this.data.url},e}();t.PrepareRequest=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.NETWORKOFFLINE="Internet Connection appears to be offline, Please check your Internet connection.",e.BODYNOTVALID="Request parameters(Body) are not valid",e.HEADERNOTVALID="Request parameters(Headers) are not valid",e.GUUIDERROR="Your session has been killed",e.REQUESTNOTVALID="Request parameters are not valid",e.MAXSERVICE="We can process maximum of five services at once",e.DECRYPTION="Unable to decript data! Hint. Some data has been modified.",e.PARSINGRESPONSE="Unable to parse response data",e.SERVERCONNECTION="Connection Error! We are unable to reach to the server",e.REGISTRATION="Handshake fail! Please connect to the server team.",e.DUPLICATESESSION="It seems like you are already logged in some other device. Kill you existing session and login again.",e.DEFAULTMESSAGE="Some technical error occured! Please check you log and come back to us.",e.CALLBACKINVALID="Call Back is not a function",e}();t.ErrorMessage=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),o=function(){function e(){}return e.prototype.mapToPlatwareRequestEndPoint=function(e,t,r){var o={envProps:{},body:{},header:{},reqData:{interfaces:{},requestData:{}},url:""};return o.envProps=n.EnvironmentStore.getInstance().getEnvironment(),o.header=t,o.body=e,o.reqData.requestData=e,o.url=r,o},e}();t.PrepareRequestForEndPoint=o},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),s=r(9),a=r(1),u=r(10),c=r(2),l=r(3),p=r(11),h=r(7),f=function(){function e(){this.security=new i.Security,this.platwareHeaderandBody=new s.PlatwareRequestModel,this.requestUtility=new a.RequestUtility,this.dateParsing=new u.DateParsing}return e.prototype.getRequestService=function(e){return n(this,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=r.sent(),this.requestProperty=new p.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setServiceHeaders(this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getEnvProp)];case 2:return r.sent(),[4,this.setServiceBody(this.requestProperty.getCurrentDate,this.requestProperty.getWindowNavigator,e,this.requestProperty.getFingerPrint,this.requestProperty.getEnvProp)];case 3:return r.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setServiceHeaders=function(e,t,r,i){return n(this,void 0,void 0,function(){var n,s,a,u,p;return o(this,function(o){switch(o.label){case 0:return n="",[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.JWTTOKEN))];case 1:return s=o.sent(),[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.AUTHJWTTOKEN))];case 2:if(a=o.sent())n=this.security.aesEncryption.getDecryption(JSON.parse(a),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey());else if(s)try{n=this.security.aesEncryption.getDecryption(JSON.parse(s),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())}catch(e){throw e}return this.platwareHeaderandBody.pwRequest.PWHeader.authorization=n,[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.LOGINID))];case 3:return u=o.sent(),p=u||"--",this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(p,t,e,i),this.setHeaderKeys(r,t,i,"ER_ER"),[2]}})})},e.prototype.setServiceBody=function(e,t,r,i,s){return n(this,void 0,void 0,function(){var n,a,u,c,l,p,h,f,d;return o(this,function(o){switch(o.label){case 0:return this.setInterface(e,t,i,s),[4,this.requestUtility.generateTxnKey(e,s)];case 1:if(n=o.sent(),delete this.platwareHeaderandBody.pwRequest.PWBody.services,r.reqData.requestData instanceof FormData){for(a=new FormData,u=0,c=Array.from(r.reqData.requestData.entries());u<c.length;u++)l=c[u],a.append(l[0],l[1]);r.reqData.requestData=a,r.reqData.requestData.append("interfaces",JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody.interfaces)),p=JSON.stringify(r.reqData.requestData),h=this.security.aesEncryption.getEncryption(p,n.t),d={request:h},r.reqData.requestData.append("request",JSON.stringify(d)),this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(d),n.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.temp=r.reqData.requestData}else this.platwareHeaderandBody.pwRequest.PWBody.requestData=r.reqData.requestData,f=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),n.t),d={request:f},this.platwareHeaderandBody.pwRequest.temp=d,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(d),n.t).toUpperCase();return this.platwareHeaderandBody.pwRequest.txnkey=n.t.toString(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=n.b,[2]}})})},e.prototype.setHeaderKeys=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=n},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return this.platwareHeaderandBody.pwRequest},e}();t.EndPointService=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=function(){function e(){this.requestUtility=new n.RequestUtility}return e.prototype.httpRespnseponseHandled=function(e,t){try{return"625"===e.status&&"LOGOUT"===t.servicename?(this.requestUtility.clearCreds(),t.servicename):"401"===e.status||"627"===e.status||"537"===e.status?t.servicename:"621"!==e.status||"AUTH_VAHANA"!==t.servicename&&"AUTH"!==t.servicename?"402"===e.status||"622"===e.status||"628"===e.status||"528"===e.status?(this.requestUtility.clearCreds(),t.servicename):"Login Failed":t.servicename}catch(e){throw e}},e}();t.Handlers=o},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),s=r(3),a=r(1),u=r(2),c=r(8),l=r(5),p=r(12),h=r(6),f=r(7),d=function(){function e(){this.security=new i.Security,this.requestUtility=new a.RequestUtility,this.serviceController=new p.ServiceController}return e.prototype.readResponse=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var e,n,u;return o(this,function(o){switch(o.label){case 0:this.authKey=t.get("Authorization"),o.label=1;case 1:return o.trys.push([1,4,,5]),u=(n=JSON).parse,[4,this.security.aesEncryption.getDecryption(i.body.response,a)];case 2:return e=u.apply(n,[o.sent()]),[4,this.requestUtility.userCredentials(r,this.authKey,s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())];case 3:return o.sent(),[2,h.UserResponse.mapAPIResponse(!0,e.services.AUTH_VAHANA.records[0].data[0].auth)];case 4:return o.sent(),[3,5];case 5:return[2]}})})},e.prototype.authErrorHandle=function(e,t,r){return n(this,void 0,void 0,function(){var n,i,s,a,p,d;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw h.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(f.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(i=!1,[3,4]);case 2:return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(f.StorageConstant.REGISTERATIONFAIL))];case 3:i=o.sent(),o.label=4;case 4:if(n=i,"LOGOUT"!==e||"625"!==t.status)return[3,5];try{throw this.requestUtility.clearCreds(),h.UserResponse.mapAPIResponse(!0,t,"PW-0002")}catch(e){throw p=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),h.UserResponse.mapAPIResponse(!1,p,p.code)}return[3,14];case 5:return"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?n?[3,7]:(this.requestUtility.clearCredsAll(),u.Storage.getInstance().setItem(this.requestUtility.makeKey(f.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doRegister(r)]):[3,9];case 6:return o.sent(),[3,8];case 7:throw this.requestUtility.clearCredsAll(),s=c.ErrorHandler.getErrors(l.ErrorConstant.REGISTRATIONFAILED),h.UserResponse.mapAPIResponse(!1,s,s.code);case 8:return[3,14];case 9:return"AUTH_VAHANA"!==e&&"AUTH"!==e||"621"!==t.status?[3,13]:confirm("You are already logged in. Do you want to kill existing session?")?(!!r.hasOwnProperty("header")?r.header.isforcelogin="Y":(r.header={},r.header.isforcelogin="Y"),[4,this.serviceController.doAuth(r)]):[3,11];case 10:return o.sent(),[3,12];case 11:throw a=c.ErrorHandler.getErrors(l.ErrorConstant.DUPLICATESESSION),h.UserResponse.mapAPIResponse(!1,a,a.code);case 12:return[3,14];case 13:if("402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status){this.requestUtility.clearCreds();try{throw h.UserResponse.mapAPIResponse(!1,t,"PW-0002")}catch(e){throw c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE)}}else if("Login Failed"===e||0!==t.status)try{throw h.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw p=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),h.UserResponse.mapAPIResponse(!1,p,p.code)}else try{throw h.UserResponse.mapAPIResponse(!1,t,t.status)}catch(e){throw d=c.ErrorHandler.getErrors(l.ErrorConstant.UNKNOWN),h.UserResponse.mapAPIResponse(!1,d,d.code)}o.label=14;case 14:return[2]}})})},e}();t.AuthResponseHandler=d},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),s=r(1),a=r(2),u=r(8),c=r(5),l=r(12),p=r(7),h=r(6),f=function(){function e(){this.security=new i.Security,this.requestUtility=new s.RequestUtility,this.serviceController=new l.ServiceController}return e.prototype.readResponse=function(e,t,r,i,s){return n(this,void 0,void 0,function(){var e;return o(this,function(r){this.authKey=t.get("Authorization");try{return e=JSON.parse(this.security.aesEncryption.getDecryption(i.body.response,s)),[2,h.UserResponse.mapAPIResponse(!0,this.getMappedResponse(e))]}catch(e){throw e}return[2]})})},e.prototype.gatewayErrorHandle=function(e,t,r){return n(this,void 0,void 0,function(){var n,i,s,l,f,d;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw h.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,a.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(i=!1,[3,4]);case 2:return[4,a.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL))];case 3:i=o.sent(),o.label=4;case 4:if(n=i,"LOGOUT"!==e||"625"!==t.status)return[3,5];throw this.requestUtility.clearCredsAll(),h.UserResponse.mapAPIResponse(!0,t,"PW-0002");case 5:return"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?n?[3,7]:(this.requestUtility.clearCredsAll(),a.Storage.getInstance().setItem(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doRegister(r)]):[3,9];case 6:return o.sent(),[3,8];case 7:throw this.requestUtility.clearCredsAll(),s=u.ErrorHandler.getErrors(c.ErrorConstant.REGISTRATIONFAILED),h.UserResponse.mapAPIResponse(!1,s,s.code);case 8:return[3,14];case 9:return"AUTH_VAHANA"!==e&&"AUTH"!==e||"621"!==t.status?[3,13]:confirm("You are already logged in. Do you want to kill existing session?")?(!!r.hasOwnProperty("header")?r.header.isforcelogin="Y":(r.header={},r.header.isforcelogin="Y"),[4,this.serviceController.doAuth(r)]):[3,11];case 10:return o.sent(),[3,12];case 11:throw l=u.ErrorHandler.getErrors(c.ErrorConstant.DUPLICATESESSION),h.UserResponse.mapAPIResponse(!1,l,l.code);case 12:return[3,14];case 13:if("402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status){this.requestUtility.clearCreds();try{throw h.UserResponse.mapAPIResponse(!1,t,"PW-0002")}catch(e){throw u.ErrorHandler.getErrors(c.ErrorConstant.PARSINGRESPONSE)}}else if("Login Failed"===e||0!==t.status)try{throw h.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw f=u.ErrorHandler.getErrors(c.ErrorConstant.PARSINGRESPONSE),h.UserResponse.mapAPIResponse(!1,f,f.code)}else try{throw h.UserResponse.mapAPIResponse(!1,t,t.status)}catch(e){throw d=u.ErrorHandler.getErrors(c.ErrorConstant.UNKNOWN),h.UserResponse.mapAPIResponse(!1,d,d.code)}o.label=14;case 14:return[2]}})})},e.prototype.getMappedResponse=function(e){var t={};for(var r in e.services){if("REGISTERUSER"===r){t.REGISTERUSER=e.services[r].records;break}t[r]=e.services[r].records}return t},e}();t.GatewayResponseHandler=f},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),s=r(3),a=r(1),u=r(2),c=r(8),l=r(5),p=r(6),h=r(7),f=function(){function e(){this.security=new i.Security,this.requestUtility=new a.RequestUtility}return e.prototype.readResponse=function(e,t){return n(this,void 0,void 0,function(){return o(this,function(r){switch(r.label){case 0:return this.authKey=t.get("Authorization"),this.jwtToken=this.getJwtToken(this.authKey),this.rsaJson=this.getRsaData(e),[4,this.requestUtility.authCredentials(this.rsaJson,s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey(),this.jwtToken)];case 1:return[2,r.sent()]}})})},e.prototype.getJwtToken=function(e){return this.security.aesEncryption.getEncryption(e,s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())},e.prototype.getRsaData=function(e){return JSON.parse(e.services.REGISTERAPP.records[0].data[0].rsa)},e.prototype.registrationErrorHandle=function(e,t,r){return n(this,void 0,void 0,function(){var n,i,s,a,f;return o(this,function(o){switch(o.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL))];case 1:return n=o.sent(),i=n||!1,"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?i?[3,3]:(this.requestUtility.clearCredsAll(),u.Storage.getInstance().setItem(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doRegister(r)]):[3,5];case 2:return o.sent(),[3,4];case 3:throw this.requestUtility.clearCredsAll(),u.Storage.getInstance().clear(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL)),s=c.ErrorHandler.getErrors(l.ErrorConstant.REGISTRATIONFAILED),p.UserResponse.mapAPIResponse(!1,s,s.code);case 4:return[3,6];case 5:if(0===t.status)throw f=c.ErrorHandler.getErrors(l.ErrorConstant.UNKNOWN),p.UserResponse.mapAPIResponse(!1,f,f.code);try{throw p.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw"500"===e.servercode?e:(a=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),p.UserResponse.mapAPIResponse(!1,a,a.code))}o.label=6;case 6:return[2]}})})},e}();t.RegistrationResponseHandler=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),o=r(5),i=r(14),s=function(){function e(){}return e.prototype.isValidArguments=function(e,t){return void 0===t&&(t=!1),t?this.isNumberofArguments(e)&&this.isBodyValid(e)&&this.isHeaderValid(e):this.isNumberofArguments(e)&&this.isBodyValid(e)&&this.isCallbackValid(e)&&this.isHeaderValid(e)},e.prototype.isNumberofArguments=function(e){try{var t=e.length;if(t>1&&t<5)return!0;throw new i.CustomError("PW001",{status:!1,message:"Execute Api requires atleast two and atmost four arguments"})}catch(e){throw e}},e.prototype.isCallbackValid=function(e){var t="function"==typeof e[3],r=1===e[3].length;if(!0===t&&!0===r)return!0;throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM)},e.prototype.isBodyValid=function(e){try{if(Object.keys(e[1]).length<1)throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM);for(var t in e[1]){if(!Array.isArray(e[1][t]))throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM);for(var r in e[1][t]){if("object"==typeof e[1][t][r])return!0;throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM)}}}catch(e){throw e}},e.prototype.isHeaderValid=function(e){if(!(void 0!==e[2]&&Object.keys(e[2]).length>0))return!0;for(var t in e[2])try{if("string"==typeof e[2][t])return!0;throw n.ErrorHandler.getErrors(o.ErrorConstant.HEADERPARAM)}catch(e){throw e}},e}();t.ArgumentsValidation=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.parameterValidation=function(e){return"string"==typeof e.url&&"object"==typeof e.header&&"object"==typeof e.body},e}();t.HttpParameterValidation=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),o=r(5),i=function(){function e(){}return e.prototype.isNetworkAvailable=function(){if(navigator.onLine)return!0;throw n.ErrorHandler.getErrors(o.ErrorConstant.NETWORK)},e}();t.NetworkValidation=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.requestValidate=function(e){if("object"!=typeof e||Array.isArray(e))return!1;var t=this.validateUrl(e),r=this.validateEnv(e),n=this.validateRequest(e,"services"),o=this.validateEnvKey(e),i=this.validateNumberofservice(e);return t&&r&&n&&o&&i},e.prototype.validateUrl=function(e){var t=e.url.trim();return!(!e.hasOwnProperty("url")||""===t||"string"!=typeof t)},e.prototype.validateEnv=function(e){return!(!e.hasOwnProperty("envProps")||"object"!=typeof e.envProps||Array.isArray(e.envProps))},e.prototype.validateRequest=function(e,t){return!e.reqData||!e.reqData.hasOwnProperty(t)||"object"==typeof e.reqData[t]&&!Array.isArray(e.reqData[t])},e.prototype.validateEnvKey=function(e){return!!(e.envProps&&e.envProps.hasOwnProperty("envProps")&&e.envProps.envProps.hasOwnProperty("orgId")&&e.envProps.envProps.hasOwnProperty("appId")&&e.envProps.envProps.hasOwnProperty("secureKey")&&e.envProps.envProps.hasOwnProperty("appVersion"))&&("string"==typeof e.envProps.envProps.orgId&&"string"==typeof e.envProps.envProps.appId&&"string"==typeof e.envProps.envProps.appVersion&&!!(e.envProps.envProps.orgId&&e.envProps.envProps.appId&&e.envProps.envProps.appVersion))},e.prototype.validateNumberofservice=function(e){try{return!(Object.keys(e.reqData.services).length>5)}catch(e){}},e}();t.PrepareDataValidation=n},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),s=r(1),a=r(12),u=r(6),c=r(2),l=r(7),p=r(8),h=r(5),f=function(){function e(){this.security=new i.Security,this.requestUtility=new s.RequestUtility,this.serviceController=new a.ServiceController}return e.prototype.readResponse=function(e,t,r){return n(this,void 0,void 0,function(){var n;return o(this,function(o){this.authKey=t.get("Authorization");try{return n=JSON.parse(this.security.aesEncryption.getDecryption(e.response,r)),[2,u.UserResponse.mapAPIResponse(!0,n)]}catch(e){throw e}return[2]})})},e.prototype.gatewayErrorHandle=function(e,t,r){return n(this,void 0,void 0,function(){var n,i,s,a,f,d;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw u.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(l.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(i=!1,[3,4]);case 2:return[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(l.StorageConstant.REGISTERATIONFAIL))];case 3:i=o.sent(),o.label=4;case 4:if(n=i,"LOGOUT"!==e||"625"!==t.status)return[3,5];throw this.requestUtility.clearCredsAll(),u.UserResponse.mapAPIResponse(!0,t,"PW-0002");case 5:return"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?n?[3,7]:(this.requestUtility.clearCredsAll(),c.Storage.getInstance().setItem(this.requestUtility.makeKey(l.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doRegister(r)]):[3,9];case 6:return o.sent(),[3,8];case 7:throw this.requestUtility.clearCredsAll(),s=p.ErrorHandler.getErrors(h.ErrorConstant.REGISTRATIONFAILED),u.UserResponse.mapAPIResponse(!1,s,s.code);case 8:return[3,14];case 9:return"AUTH_VAHANA"!==e&&"AUTH"!==e||"621"!==t.status?[3,13]:confirm("You are already logged in. Do you want to kill existing session?")?(!!r.hasOwnProperty("header")?r.header.isforcelogin="Y":(r.header={},r.header.isforcelogin="Y"),[4,this.serviceController.doAuth(r)]):[3,11];case 10:return o.sent(),[3,12];case 11:throw a=p.ErrorHandler.getErrors(h.ErrorConstant.DUPLICATESESSION),u.UserResponse.mapAPIResponse(!1,a,a.code);case 12:return[3,14];case 13:if("402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status){this.requestUtility.clearCreds();try{throw u.UserResponse.mapAPIResponse(!1,t,"PW-0002")}catch(e){throw p.ErrorHandler.getErrors(h.ErrorConstant.PARSINGRESPONSE)}}else if("Login Failed"===e||0!==t.status)try{throw u.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw f=p.ErrorHandler.getErrors(h.ErrorConstant.PARSINGRESPONSE),u.UserResponse.mapAPIResponse(!1,f,f.code)}else try{throw u.UserResponse.mapAPIResponse(!1,t,t.status)}catch(e){throw d=p.ErrorHandler.getErrors(h.ErrorConstant.UNKNOWN),u.UserResponse.mapAPIResponse(!1,d,d.code)}o.label=14;case 14:return[2]}})})},e}();t.EndPointResponseHandler=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.controllerConst={DMS:{basePoint:"/DMS/execution",uploadStartPoint:"/upload-gateway",fetchForDocument:"/fetch/document",fetchForFolder:"/fetch/folder",upload:"/upload",downloadUrl:"/download/file",deleteFile:"/delete",deleteFileId:"/delete/file",fetchByStorageId:"/dmsconfig/admin/get/dmsClientDetails",uploadMetaData:"/update/metadata",updateFileMetaData:"/update/files/metadata",updateDocument:"/update/document",fetchByFileId:"/fetch/file",listingData:"/fetch/path",document:"document",file:"file",FILE:"FILE",DOCUMENT:"DOCUMENT"}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(21),o=function(){function e(){this.addMessageListener()}return e.prototype.postMessage=function(e){var t=(new n.RegistrationService).getRegistrartionRequest(e);this.worker.postMessage(t)},e.prototype.addMessageListener=function(){this.worker.addEventListener("message",function(e){var t=e.data;console.log(t)})},e.prototype.onMessage=function(e){this.worker.onmessage=function(t){var r=t.data;e(r)}},e.prototype.onError=function(e){this.worker.onerror=function(t){var r=t.error;e(r)}},e.prototype.terminateWorker=function(){this.worker.terminate()},e}();t.WebWorkerWrapper=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.filterResponse=function(e){var t=this;return new Promise(function(r,n){"object"==typeof e.data?t.responseHandler(e,t.getServiceName(e.data),r,n):!0===e.status?r(e):n(e)})},e.prototype.getServiceName=function(e){if(e)return delete e.status,Object.keys(e)},e.prototype.responseHandler=function(e,t,r,n){e.status?this.dataHandler(e.data,t,r,n):n(e)},e.prototype.dataHandler=function(e,t,r,n){for(var o in t)for(var i in e)if(i===t[o]){var s={};e[i][0].hasOwnProperty("data")?(s[i]=e[i][0].data[0].response||e[i][0].data[0],r(s)):(s[i]=e[i][0].error,n(s))}},e}();t.FilterResponse=n}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;
//# sourceMappingURL=scripts.js.map